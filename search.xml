<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux运维面试题]]></title>
    <url>%2F2019%2F09%2F09%2Fmian%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[跳槽吧！Linux运维加薪面试题 跳槽吧！Linux运维加薪面试题1、什么是运维？什么是游戏运维？ 1）运维是指大型组织已经建立好的网络软硬件的维护，就是要保证业务的上线与运作的正常，在他运转的过程中，对他进行维护，他集合了网络、系统、数据库、开发、安全、监控于一身的技术运维又包括很多种，有DBA运维、网站运维、虚拟化运维、监控运维、游戏运维等等 2）游戏运维又有分工，分为开发运维、应用运维（业务运维）和系统运维开发运维：是给应用运维开发运维工具和运维平台的应用运维：是给业务上线、维护和做故障排除的，用开发运维开发出来的工具给业务上线、维护、做故障排查系统运维：是给应用运维提供业务上的基础设施，比如：系统、网络、监控、硬件等等 总结：开发运维和系统运维给应用运维提供了“工具”和“基础设施”上的支撑开发运维、应用运维和系统运维他们的工作是环环相扣的 2、在工作中，运维人员经常需要跟运营人员打交道，请问运营人员是做什么工作的？游戏运营要做的一个事情除了协调工作以外还需要与各平台沟通，做好开服的时间、开服数、用户导量、活动等计划 3、现在给你三百台服务器，你怎么对他们进行管理？管理3百台服务器的方式：1）设定跳板机，使用统一账号登录，便于安全与登录的考量。2）使用salt、ansiable、puppet进行系统的统一调度与配置的统一管理。3）建立简单的服务器的系统、配置、应用的cmdb信息管理。便于查阅每台服务器上的各种信息记录。 4、简述raid0 raid1 raid5 三种工作模式的工作原理及特点RAID，可以把硬盘整合成一个大磁盘，还可以在大磁盘上再分区，放数据还有一个大功能，多块盘放在一起可以有冗余（备份）RAID整合方式有很多，常用的：0 1 5 10 RAID 0，可以是一块盘和N个盘组合其优点读写快，是RAID中最好的缺点：没有冗余，一块坏了数据就全没有了 RAID 1，只能2块盘，盘的大小可以不一样，以小的为准10G+10G只有10G，另一个做备份。它有100%的冗余，缺点：浪费资源，成本高 RAID 5 ，3块盘，容量计算10*（n-1）,损失一块盘特点，读写性能一般，读还好一点，写不好 冗余从好到坏：RAID1 RAID10 RAID 5 RAID0性能从好到坏：RAID0 RAID10 RAID5 RAID1成本从低到高：RAID0 RAID5 RAID1 RAID10 单台服务器：很重要盘不多，系统盘，RAID1数据库服务器：主库：RAID10 从库 RAID5RAID0（为了维护成本，RAID10）WEB服务器，如果没有太多的数据的话，RAID5,RAID0（单盘）有多台，监控、应用服务器，RAID0 RAID5 我们会根据数据的存储和访问的需求，去匹配对应的RAID级别 5、LVS、Nginx、HAproxy有什么区别？工作中你怎么选择？LVS：是基于四层的转发HAproxy：是基于四层和七层的转发，是专业的代理服务器Nginx：是WEB服务器，缓存服务器，又是反向代理服务器，可以做七层的转发 区别：LVS由于是基于四层的转发所以只能做端口的转发而基于URL的、基于目录的这种转发LVS就做不了 工作选择： HAproxy和Nginx由于可以做七层的转发，所以URL和目录的转发都可以做在很大并发量的时候我们就要选择LVS，像中小型公司的话并发量没那么大选择HAproxy或者Nginx足已，由于HAproxy由是专业的代理服务器配置简单，所以中小型企业推荐使用HAproxy 6、Squid、Varinsh和Nginx有什么区别，工作中你怎么选择？Squid、Varinsh和Nginx都是代理服务器 什么是代理服务器：能当替用户去访问公网，并且能把访问到的数据缓存到服务器本地，等用户下次再访问相同的资源的时候，代理服务器直接从本地回应给用户，当本地没有的时候，我代替你去访问公网，我接收你的请求，我先在我自已的本地缓存找，如果我本地缓存有，我直接从我本地的缓存里回复你如果我在我本地没有找到你要访问的缓存的数据，那么代理服务器就会代替你去访问公网 区别：1）Nginx本来是反向代理/web服务器，用了插件可以做做这个副业但是本身不支持特性挺多，只能缓存静态文件2）从这些功能上。varnish和squid是专业的cache服务，而nginx这些是第三方模块完成3）varnish本身的技术上优势要高于squid，它采用了可视化页面缓存技术 在内存的利用上，Varnish比Squid具有优势，性能要比Squid高。还有强大的通过Varnish管理端口，可以使用正则表达式快速、批量地清除部分缓存它是内存缓存，速度一流，但是内存缓存也限制了其容量，缓存页面和图片一般是挺好的4）squid的优势在于完整的庞大的cache技术资料，和很多的应用生产环境 工作中选择：要做cache服务的话，我们肯定是要选择专业的cache服务，优先选择squid或者varnish。 7、Tomcat和Resin有什么区别，工作中你怎么选择？区别：Tomcat用户数多，可参考文档多，Resin用户数少，可考虑文档少最主要区别则是Tomcat是标准的java容器，不过性能方面比resin的要差一些但稳定性和java程序的兼容性，应该是比resin的要好 工作中选择：现在大公司都是用resin，追求性能；而中小型公司都是用Tomcat，追求稳定和程序的兼容 8、什么是中间件？什么是jdk？中间件介绍：中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源中间件位于客户机/ 服务器的操作系统之上，管理计算机资源和网络通讯是连接两个独立应用程序或独立系统的软件。相连接的系统，即使它们具有不同的接口 但通过中间件相互之间仍能交换信息。执行中间件的一个关键途径是信息传递通过中间件，应用程序可以工作于多平台或OS环境。 jdk：jdk是Java的开发工具包它是一种用于构建在 Java 平台上发布的应用程序、applet 和组件的开发环境 9、讲述一下Tomcat8005、8009、8080三个端口的含义？8005==》 关闭时使用8009==》 为AJP端口，即容器使用，如Apache能通过AJP协议访问Tomcat的8009端口8080==》 一般应用使用 10、什么叫CDN？ 即内容分发网络 其目的是通过在现有的Internet中增加一层新的网络架构，将网站的内容发布到最接近用户的网络边缘，使用户可就近取得所需的内容，提高用户访问网站的速度 11、什么叫网站灰度发布？灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式AB test就是一种灰度发布方式，让一部用户继续用A，一部分用户开始用B如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面 来灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度 12、简述DNS进行域名解析的过程？用户要访问www.baidu.com，会先找本机的host文件，再找本地设置的DNS服务器，如果也没有的话，就去网络中找根服务器，根服务器反馈结果，说只能提供一级域名服务器.cn，就去找一级域名服务器，一级域名服务器说只能提供二级域名服务器.com.cn,就去找二级域名服务器，二级域服务器只能提供三级域名服务器.baidu.com.cn，就去找三级域名服务器，三级域名服务器正好有这个网站www.baidu.com，然后发给请求的服务器，保存一份之后，再发给客户端 13、RabbitMQ是什么东西？RabbitMQ也就是消息队列中间件，消息中间件是在消息的传息过程中保存消息的容器消息中间件再将消息从它的源中到它的目标中标时充当中间人的作用队列的主要目的是提供路由并保证消息的传递；如果发送消息时接收者不可用消息队列不会保留消息，直到可以成功地传递为止，当然，消息队列保存消息也是有期限地 14、讲一下Keepalived的工作原理？在一个虚拟路由器中，只有作为MASTER的VRRP路由器会一直发送VRRP通告信息,BACKUP不会抢占MASTER，除非它的优先级更高。当MASTER不可用时(BACKUP收不到通告信息)多台BACKUP中优先级最高的这台会被抢占为MASTER。这种抢占是非常快速的(&lt;1s)，以保证服务的连续性由于安全性考虑，VRRP包使用了加密协议进行加密。BACKUP不会发送通告信息，只会接收通告信息 15、讲述一下LVS三种模式的工作过程？LVS 有三种负载均衡的模式，分别是VS/NAT（nat 模式） VS/DR(路由模式) VS/TUN（隧道模式） 一、NAT模式（VS-NAT）原理：就是把客户端发来的数据包的IP头的目的地址，在负载均衡器上换成其中一台RS的IP地址并发至此RS来处理,RS处理完后把数据交给负载均衡器,负载均衡器再把数据包原IP地址改为自己的IP将目的地址改为客户端IP地址即可期间,无论是进来的流量,还是出去的流量,都必须经过负载均衡器优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，只有负载均衡器需要一个合法的IP地址缺点：扩展性有限。当服务器节点（普通PC服务器）增长过多时,负载均衡器将成为整个系统的瓶颈因为所有的请求包和应答包的流向都经过负载均衡器。当服务器节点过多时大量的数据包都交汇在负载均衡器那，速度就会变慢！ 二、IP隧道模式（VS-TUN）原理：首先要知道，互联网上的大多Internet服务的请求包很短小，而应答包通常很大那么隧道模式就是，把客户端发来的数据包，封装一个新的IP头标记(仅目的IP)发给RSRS收到后,先把数据包的头解开,还原数据包,处理后,直接返回给客户端,不需要再经过负载均衡器。注意,由于RS需要对负载均衡器发过来的数据包进行还原,所以说必须支持IPTUNNEL协议，所以,在RS的内核中,必须编译支持IPTUNNEL这个选项优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，就能处理很巨大的请求量这种方式，一台负载均衡器能够为很多RS进行分发。而且跑在公网上就能进行不同地域的分发。缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，服务器可能只局限在部分Linux系统上 三、直接路由模式（VS-DR）原理：负载均衡器和RS都使用同一个IP对外服务但只有DR对ARP请求进行响应所有RS对本身这个IP的ARP请求保持静默也就是说,网关会把对这个服务IP的请求全部定向给DR而DR收到数据包后根据调度算法,找出对应的RS,把目的MAC地址改为RS的MAC（因为IP一致）并将请求分发给这台RS这时RS收到这个数据包,处理完成之后，由于IP一致，可以直接将数据返给客户则等于直接从客户端收到这个数据包无异,处理后直接返回给客户端由于负载均衡器要对二层包头进行改换,所以负载均衡器和RS之间必须在一个广播域也可以简单的理解为在同一台交换机上优点：和TUN（隧道模式）一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器。缺点：（不能说缺点，只能说是不足）要求负载均衡器的网卡必须与物理网卡在一个物理段上。 16、mysql的innodb如何定位锁问题，mysql如何减少主从复制延迟？mysql的innodb如何定位锁问题:在使用 show engine innodb status检查引擎状态时，发现了死锁问题在5.5中，information_schema 库中增加了三个关于锁的表（MEMORY引擎）innodb_trx ## 当前运行的所有事务innodb_locks ## 当前出现的锁innodb_lock_waits ## 锁等待的对应关系 mysql如何减少主从复制延迟:如果延迟比较大，就先确认以下几个因素： 从库硬件比主库差，导致复制延迟 主从复制单线程，如果主库写并发太大，来不及传送到从库就会导致延迟。更高版本的mysql可以支持多线程复制 慢SQL语句过多 网络延迟 master负载主库读写压力大，导致复制延迟，架构的前端要加buffer及缓存层 slave负载一般的做法是，使用多台slave来分摊读请求，再从这些slave中取一台专用的服务器 只作为备份用，不进行其他任何操作.另外， 2个可以减少延迟的参数:–slave-net-timeout=seconds 单位为秒 默认设置为 3600秒 参数含义：当slave从主数据库读取log数据失败后，等待多久重新建立连接并获取数据 –master-connect-retry=seconds 单位为秒 默认设置为 60秒 参数含义：当重新建立主从连接时，如果连接建立失败，间隔多久后重试 通常配置以上2个参数可以减少网络问题导致的主从数据同步延迟 MySQL数据库主从同步延迟解决方案最简单的减少slave同步延时的方案就是在架构上做优化，尽量让主库的DDL快速执行还有就是主库是写，对数据安全性较高，比如sync_binlog=1，innodb_flush_log_at_trx_commit= 1 之类的设置，而slave则不需要这么高的数据安全，完全可以讲sync_binlog设置为0或者关闭binloginnodb_flushlog也可以设置为0来提高sql的执行效率。另外就是使用比主库更好的硬件设备作为slave 17、如何重置mysql root密码？ 一、 在已知MYSQL数据库的ROOT用户密码的情况下，修改密码的方法：1、 在SHELL环境下，使用mysqladmin命令设置：mysqladmin –u root –p password “新密码” 回车后要求输入旧密码 2、 在mysql&gt;环境中,使用update命令，直接更新mysql库user表的数据：Update mysql.user set password=password(‘新密码’) where user=’root’;flush privileges;注意：mysql语句要以分号”；”结束 3、 在mysql&gt;环境中，使用grant命令，修改root用户的授权权限。grant all on . to root@’localhost’ identified by ‘新密码’； 二、 如查忘记了mysql数据库的ROOT用户的密码，又如何做呢？方法如下：1、 关闭当前运行的mysqld服务程序：service mysqld stop（要先将mysqld添加为系统服务）2、 使用mysqld_safe脚本以安全模式（不加载授权表）启动mysqld 服务/usr/local/mysql/bin/mysqld_safe –skip-grant-table &amp;3、 使用空密码的root用户登录数据库，重新设置ROOT用户的密码＃mysql -u rootMysql&gt; Update mysql.user set password=password(‘新密码’) where user=’root’;Mysql&gt; flush privileges; 18、lvs/nginx/haproxy优缺点Nginx的优点是：1、工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构它的正则规则比HAProxy更为强大和灵活，这也是它目前广泛流行的主要原因之一Nginx单凭这点可利用的场合就远多于LVS了。 2、Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一相反LVS对网络稳定性依赖比较大，这点本人深有体会； 3、Nginx安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。 4、可以承担高负载压力且稳定，在硬件不差的情况下一般能支撑几万次的并发量，负载度比LVS相对小些。 5、Nginx可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点，不过其中缺点就是不支持url来检测。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx会把上传切到另一台服务器重新处理，而LVS就直接断掉了如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而不满。 6、Nginx不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器LNMP也是近几年非常流行的web架构，在高流量的环境中稳定性也很好。 7、Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可考虑用其作为反向代理加速器 8、Nginx可作为中层反向代理使用，这一层面Nginx基本上无对手，唯一可以对比Nginx的就只有lighttpd了不过lighttpd目前还没有做到Nginx完全的功能，配置也不那么清晰易读，社区资料也远远没Nginx活跃 9、Nginx也可作为静态网页和图片服务器，这方面的性能也无对手。还有Nginx社区非常活跃，第三方模块也很多 Nginx的缺点是：1、Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些，这个是它的缺点2、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测不支持Session的直接保持，但能通过ip_hash来解决 LVS：使用Linux内核集群实现一个高性能、高可用的负载均衡服务器它具有很好的可伸缩性（Scalability)、可靠性（Reliability)和可管理性（Manageability) LVS的优点是：1、抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低 2、配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西所以并不需要太多接触，大大减少了人为出错的几率 3、工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案如LVS+Keepalived，不过我们在项目实施中用得最多的还是LVS/DR+Keepalived 4、无流量，LVS只分发请求，而流量并不从它本身出去，这点保证了均衡器IO的性能不会收到大流量的影响。5、应用范围较广，因为LVS工作在4层，所以它几乎可对所有应用做负载均衡，包括http、数据库、在线聊天室等 LVS的缺点是：1、软件本身不支持正则表达式处理，不能做动静分离而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在2、如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了特别后面有Windows Server的机器的话，如果实施及配置还有维护过程就比较复杂了相对而言，Nginx/HAProxy+Keepalived就简单多了。 HAProxy的特点是：1、HAProxy也是支持虚拟主机的。2、HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导同时支持通过获取指定的url来检测后端服务器的状态 3、HAProxy跟LVS类似，本身就只是一款负载均衡软件单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的 4、HAProxy支持TCP协议的负载均衡转发，可以对MySQL读进行负载均衡对后端的MySQL节点进行检测和负载均衡，大家可以用LVS+Keepalived对MySQL主从做负载均衡 5、HAProxy负载均衡策略非常多，HAProxy的负载均衡算法现在具体有如下8种：①roundrobin，表示简单的轮询，这个不多说，这个是负载均衡基本都具备的；② static-rr，表示根据权重，建议关注；③leastconn，表示最少连接者先处理，建议关注；④ source，表示根据请求源IP，这个跟Nginx的IP_hash机制类似我们用其作为解决session问题的一种方法，建议关注；⑤ri，表示根据请求的URI；⑥rl_param，表示根据请求的URl参数’balance url_param’ requires an URL parameter name；⑦hdr(name)，表示根据HTTP请求头来锁定每一次HTTP请求；⑧rdp-cookie(name)，表示根据据cookie(name)来锁定并哈希每一次TCP请求。 19、mysql数据备份工具mysqldump工具mysqldump是mysql自带的备份工具，目录在bin目录下面：/usr/local/mysql/bin/mysqldump支持基于innodb的热备份，但是由于是逻辑备份，所以速度不是很快，适合备份数据比较小的场景Mysqldump完全备份+二进制日志可以实现基于时间点的恢复。 基于LVM快照备份在物理备份中，有基于文件系统的物理备份（LVM的快照），也可以直接用tar之类的命令对整个数据库目录进行打包备份，但是这些只能进行泠备份，不同的存储引擎备份的也不一样，myisam自动备份到表级别而innodb不开启独立表空间的话只能备份整个数据库。 tar包备份 percona提供的xtrabackup工具支持innodb的物理热备份，支持完全备份，增量备份，而且速度非常快，支持innodb存储引起的数据在不同数据库之间迁移，支持复制模式下的从机备份恢复备份恢复，为了让xtrabackup支持更多的功能扩展可以设立独立表空间，打开 innodb_file_per_table功能，启用之后可以支持单独的表备份 20、keepalive的工作原理和如何做到健康检查keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了这时就需要根据VRRP的优先级来选举一个backup当master。这样就可以保证路由器的高可用了 keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式，vrrp模块是来实现VRRP协议的 Keepalived健康检查方式配置HTTP_GET|SSL_GETHTTP_GET | SSL_GET{url {path /# HTTP/SSL 检查的url可以是多个digest # HTTP/SSL 检查后的摘要信息用工具genhash生成status_code 200# HTTP/SSL 检查返回的状态码}connect_port 80 # 连接端口bindtoconnect_timeout 3 # 连接超时时间nb_get_retry 3 # 重连次数delay_before_retry 2 #连接间隔时间} 21、统计ip访问情况，要求分析nginx访问日志，找出访问页面数量在前十位的ipcat access.log | awk ‘{print $1}’ | uniq -c | sort -rn | head -10 22、使用tcpdump监听主机为192.168.1.1，tcp端口为80的数据，同时将输出结果保存输出到tcpdump.logtcpdump ‘host 192.168.1.1 and port 80’ &gt; tcpdump.log 23、如何将本地80 端口的请求转发到8080 端口，当前主机IP 为192.168.2.1iptables -A PREROUTING -d 192.168.2.1 -p tcp -m tcp -dport 80 -j DNAT-to-destination 192.168.2.1:8080 24、简述raid0 raid1 raid5 三种工作模式的工作原理及特点RAID 0：带区卷，连续以位或字节为单位分割数据，并行读/写于多个磁盘上，因此具有很高的数据传输率但它没有数据冗余，RAID 0 只是单纯地提高性能，并没有为数据的可靠性提供保证而且其中的一个磁盘失效将影响到所有数据。因此，RAID 0 不能应用于数据安全性要求高的场合 RAID 1：镜像卷，它是通过磁盘数据镜像实现数据冗余，在成对的独立磁盘上产生互为备份的数据不能提升写数据效率。当原始数据繁忙时，可直接从镜像拷贝中读取数据，因此RAID1 可以提高读取性能RAID 1 是磁盘阵列中单位成本最高的，镜像卷可用容量为总容量的1/2，但提供了很高的数据安全性和可用性当一个磁盘失效时，系统可以自动切换到镜像磁盘上读写，而不需要重组失效的数据 RAID5：至少由3块硬盘组成，分布式奇偶校验的独立磁盘结构，它的奇偶校验码存在于所有磁盘上任何一个硬盘损坏，都可以根据其它硬盘上的校验位来重建损坏的数据（最多允许1块硬盘损坏）所以raid5可以实现数据冗余，确保数据的安全性，同时raid5也可以提升数据的读写性能 25、你对现在运维工程师的理解和以及对其工作的认识运维工程师在公司当中责任重大，需要保证时刻为公司及客户提供最高、最快、最稳定、最安全的服务运维工程师的一个小小的失误，很有可能会对公司及客户造成重大损失因此运维工程师的工作需要严谨及富有创新精神 26、实时抓取并显示当前系统中tcp 80端口的网络数据信息，请写出完整操作命令tcpdump -nn tcp port 80 28、Linux系统中病毒怎么解决1）最简单有效的方法就是重装系统2）要查的话就是找到病毒文件然后删除中毒之后一般机器cpu、内存使用率会比较高机器向外发包等异常情况，排查方法简单介绍下 top 命令找到cpu使用率最高的进程一般病毒文件命名都比较乱，可以用 ps aux 找到病毒文件位置rm -f 命令删除病毒文件检查计划任务、开机启动项和病毒文件目录有无其他可以文件等 3）由于即使删除病毒文件不排除有潜伏病毒，所以最好是把机器备份数据之后重装一下 29、发现一个病毒文件你删了他又自动创建怎么解决公司的内网某台linux服务器流量莫名其妙的剧增,用iftop查看有连接外网的情况针对这种情况一般重点查看netstat连接的外网ip和端口。 用lsof -p pid可以查看到具体是那些进程，哪些文件经查勘发现/root下有相关的配置conf.n hhe两个可疑文件，rm -rf后不到一分钟就自动生成了由此推断是某个母进程产生的这些文件。所以找到母进程就是找到罪魁祸首 查杀病毒最好断掉外网访问，还好是内网服务器，可以通过内网访问断了内网，病毒就失去外联的能力，杀掉它就容易的多怎么找到呢，找了半天也没有看到蛛丝马迹，没办法只有ps axu一个个排查方法是查看可以的用户和和系统相似而又不是的冒牌货，果然，看到了如下进程可疑 看不到图片就是/usr/bin/.sshd于是我杀掉所有.sshd相关的进程，然后直接删掉.sshd这个可执行文件然后才删掉了文章开头提到的自动复活的文件 总结一下，遇到这种问题，如果不是太严重，尽量不要重装系统一般就是先断外网，然后利用iftop,ps,netstat,chattr,lsof,pstree这些工具顺藤摸瓜一般都能找到元凶。但是如果遇到诸如此类的问题/boot/efi/EFI/redhat/grub.efi: Heuristics.Broken.Executable FOUND，个人觉得就要重装系统了 30、说说TCP/IP的七层模型应用层 (Application)：网络服务与最终用户的一个接口。协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP 表示层（Presentation Layer）：数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）格式有，JPEG、ASCll、DECOIC、加密格式等 会话层（Session Layer）：建立、管理、终止会话。（在五层模型里面已经合并到了应用层）对应主机进程，指本地主机与远程主机正在进行的会话 传输层 (Transport)：定义传输数据的协议端口号，以及流控和差错校验。协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层 网络层 (Network)：进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP 数据链路层 (Link)：建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正 物理层（Physical Layer）： 是计算机网络OSI模型中最低的一层物理层规定:为传输数据所需要的物理链路创建、维持、拆除而提供具有机械的，电子的，功能的和规范的特性 简单的说，物理层确保原始的数据可在各种物理媒体上传输。局域网与广域网皆属第1、2层物理层是OSI的第一层，它虽然处于最底层，却是整个开放系统的基础物理层为设备之间的数据通信提供传输媒体及互连设备，为数据传输提供可靠的环境如果您想要用尽量少的词来记住这个第一层，那就是“信号和介质” 31、你常用的Nginx模块，用来做什么rewrite模块，实现重写功能access模块：来源控制ssl模块：安全加密ngx_http_gzip_module：网络传输压缩模块ngx_http_proxy_module 模块实现代理ngx_http_upstream_module模块实现定义后端服务器列表ngx_cache_purge实现缓存清除功能 32、请列出你了解的web服务器负载架构NginxHaproxyKeepalivedLVS 33、查看http的并发请求数与其TCP连接状态netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’ 还有ulimit -n 查看linux系统打开最大的文件描述符，这里默认1024不修改这里web服务器修改再大也没用，若要用就修改很几个办法，这里说其中一个：修改/etc/security/limits.conf soft nofile 10240 hard nofile 10240重启后生效 34、用tcpdump嗅探80端口的访问看看谁最高tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1″.”$2″.”$3″.”$4}’| sort | uniq -c | sort -nr |head -20 35、写一个脚本，实现判断192.168.1.0/24网络里，当前在线的IP有哪些，能ping通则认为在线 !/bin/bashfor ip in seq 1 255do{ping -c 1 192.168.1.$ip &gt; /dev/null 2&gt;&amp;1if [ $? -eq 0 ]; thenecho 192.168.1.$ip UPelseecho 192.168.1.$ip DOWNfi}&amp;donewait 36、已知 apache 服务的访问日志按天记录在服务器本地目录/app/logs 下，由于磁盘空间紧张现在要求只能保留最近 7 天的访问日志！请问如何解决？请给出解决办法或配置或处理命令 创建文件脚本： !/bin/bashfor n in seq 14dodate -s “11/0$n/14”touch access_www_(date +%F).logdone 解决方法： pwd/application/logsll-rw-r–r–. 1 root root 0 Jan 1 00:00 access_www_2015-01-01.log-rw-r–r–. 1 root root 0 Jan 2 00:00 access_www_2015-01-02.log-rw-r–r–. 1 root root 0 Jan 3 00:00 access_www_2015-01-03.log-rw-r–r–. 1 root root 0 Jan 4 00:00 access_www_2015-01-04.log-rw-r–r–. 1 root root 0 Jan 5 00:00 access_www_2015-01-05.log-rw-r–r–. 1 root root 0 Jan 6 00:00 access_www_2015-01-06.log-rw-r–r–. 1 root root 0 Jan 7 00:00 access_www_2015-01-07.log-rw-r–r–. 1 root root 0 Jan 8 00:00 access_www_2015-01-08.log-rw-r–r–. 1 root root 0 Jan 9 00:00 access_www_2015-01-09.log-rw-r–r–. 1 root root 0 Jan 10 00:00 access_www_2015-01-10.log-rw-r–r–. 1 root root 0 Jan 11 00:00 access_www_2015-01-11.log-rw-r–r–. 1 root root 0 Jan 12 00:00 access_www_2015-01-12.log-rw-r–r–. 1 root root 0 Jan 13 00:00 access_www_2015-01-13.log-rw-r–r–. 1 root root 0 Jan 14 00:00 access_www_2015-01-14.log find /application/logs/ -type f -mtime +7 -name “*.log”|xargs rm –f也可以使用-exec rm -f {} ;进行删除ll-rw-r–r–. 1 root root 0 Jan 7 00:00 access_www_2015-01-07.log-rw-r–r–. 1 root root 0 Jan 8 00:00 access_www_2015-01-08.log-rw-r–r–. 1 root root 0 Jan 9 00:00 access_www_2015-01-09.log-rw-r–r–. 1 root root 0 Jan 10 00:00 access_www_2015-01-10.log-rw-r–r–. 1 root root 0 Jan 11 00:00 access_www_2015-01-11.log-rw-r–r–. 1 root root 0 Jan 12 00:00 access_www_2015-01-12.log-rw-r–r–. 1 root root 0 Jan 13 00:00 access_www_2015-01-13.log-rw-r–r–. 1 root root 0 Jan 14 00:00 access_www_2015-01-14.log 37、如何优化 Linux系统（可以不说太具体）？不用root，添加普通用户，通过sudo授权管理更改默认的远程连接SSH服务端口及禁止root用户远程连接定时自动更新服务器时间配置国内yum源关闭selinux及iptables（iptables工作场景如果有外网IP一定要打开，高并发除外）调整文件描述符的数量精简开机启动服务（crond rsyslog network sshd）内核参数优化（/etc/sysctl.conf）更改字符集，支持中文，但建议还是用英文字符集，防止乱码锁定关键系统文件清空/etc/issue，去除系统及内核版本登录前的屏幕显示 38、请执行命令取出 linux 中 eth0 的 IP 地址(请用 cut，有能力者也可分别用 awk,sed 命令答)cut方法1： ifconfig eth0|sed -n ‘2p’|cut -d “:” -f2|cut -d ” ” -f1192.168.20.130awk方法2： ifconfig eth0|awk ‘NR==2’|awk -F “:” ‘{print $2}’|awk ‘{print $1}’192.168.20.130awk多分隔符方法3： ifconfig eth0|awk ‘NR==2’|awk -F “[: ]+” ‘{print $4}’192.168.20.130sed方法4： ifconfig eth0|sed -n ‘/inet addr/p’|sed -r ‘s#^.ddr:(.)Bc.*$##g’192.168.20.130 39、请写出下面 linux SecureCRT 命令行快捷键命令的功能？Ctrl + aCtrl + cCtrl + dCtrl + eCtrl + lCtrl + uCtrl + ktabCtrl+shift+cCtrl+shift+v 解答：Ctrl + a —-&gt;光标移动到行首Ctrl + e —-&gt;光标移动到行尾Ctrl + c —-&gt;终止当前程序Ctrl + d —-&gt;如果光标前有字符则删除，没有则退出当前中断Ctrl + l —-&gt;清屏Ctrl + u —-&gt;剪切光标以前的字符Ctrl + k —-&gt;剪切光标以后的字符Ctrl + y —-&gt;复制u/k的内容Ctrl + r —-&gt;查找最近用过的命令tab —-&gt;命令或路径补全Ctrl+shift+c —-&gt;复制Ctrl+shift+v —-&gt;粘贴 40、每天晚上 12 点，打包站点目录/var/www/html 备份到/data 目录下（最好每次备份按时间生成不同的备份包） cat a.sh/bin/bashcd /var/www/ &amp;&amp; /bin/tar zcf /data/html-date +%m-%d%H.tar.gz html/ crontab –e00 00 * * * /bin/sh /root/a.sh 1、Linux如何挂载windows下的共享目录？mount.cifs //IP地址/server /mnt/server -o user=administrator,password=123456linux 下的server需要自己手动建一个 后面的user与pass 是windows主机的账号和密码 注意空格 和逗号 2、如何查看http的并发请求数与其TCP连接状态？netstat -n | awk ‘/^tcp/ {++b[$NF]}’ END {for(a in b) print a,b[a]}’ 还有ulimit -n 查看linux系统打开最大的文件描述符，这里默认1024，不修改这里web服务器修改再大也没用。若要用就修改很几个办法，这里说其中一个：修改/etc/security/limits.conf soft nofile 10240 hard nofile 10240重启后生效 3、如何用tcpdump嗅探80端口的访问看看谁最高？tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1″.”$2″.”$3″.”$4″.”}’ | sort |uniq -c | sort -nr | head-5 4、如何查看/var/log目录下的文件数？ls /var/log/ -1R | grep “-” | wc -l 5、如何查看Linux系统每个ip的连接数？netstat -n | awk ‘/^tcp/ {print $5}’ | awk -F: ‘{print $1}’ | sort | uniq -c | sort -rn 6、shell下生成32位随机密码cat /dev/urandom | head -1 | md5sum | head -c 32 &gt;&gt; /pass 7、统计出apache的access.log中访问量最多的5个ipcat access.log | awk ‘{print $1}’ | sort | uniq -c | sort -n -r | head -5 8、如何查看二进制文件的内容？我们一般通过hexdump命令 来查看二进制文件的内容。hexdump -C XXX(文件名) -C是参数 不同的参数有不同的意义-C 是比较规范的 十六进制和ASCII码显示-c 是单字节字符显示-b 单字节八进制显示-o 是双字节八进制显示-d 是双字节十进制显示-x 是双字节十六进制显示 9、ps aux 中的VSZ代表什么意思，RSS代表什么意思？VSZ:虚拟内存集,进程占用的虚拟内存空间RSS:物理内存集,进程战用实际物理内存空间 10、如何检测并修复/dev/hda5？fsck用来检查和维护不一致的文件系统。若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查 11、介绍下Linux系统的开机启动顺序加载BIOS–&gt;读取MBR–&gt;Boot Loader–&gt;加载内核–&gt;用户层init一句inittab文件来设定系统运行的等级(一般3或者5，3是多用户命令行，5是界面)–&gt;init进程执行rc.syninit–&gt;启动内核模块–&gt;执行不同级别运行的脚本程序–&gt;执行/etc/rc.d/rc.local(本地运行服务)–&gt;执行/bin/login,就可以登录了。 12、符号链接与硬链接的区别我们可以把符号链接，也就是软连接 当做是 windows系统里的 快捷方式。硬链接 就好像是 又复制了一份，举例说明：ln 3.txt 4.txt 这是硬链接，相当于复制，不可以跨分区，但修改3,4会跟着变，若删除3,4不受任何影响。ln -s 3.txt 4.txt 这是软连接，相当于快捷方式。修改4,3也会跟着变，若删除3,4就坏掉了。不可以用了。 13、保存当前磁盘分区的分区表dd 命令是以个强大的命令，在复制的同时进行转换dd if=/dev/sda of=./mbr.txt bs=1 count=512 14、如何在文本里面进行复制、粘贴，删除行，删除全部，按行查找和按字母查找？以下操作全部在命令行状态操作，不要在编辑状态操作。在文本里 移动到想要复制的行 按yy 想复制到哪就移动到哪，然后按P 就黏贴了删除行 移动到改行 按dd删除全部 dG 这里注意G一定要大写按行查找 :90 这样就是找到第90行按字母查找 /path 这样就是 找到path这个单词所在的位置，文本里可能存在多个,多次查找会显示在不同的位置。 15、手动安装grubgrub-install /dev/sda 16、修改内核参数vi /etc/sysctl.conf 这里修改参数sysctl -p 刷新后可用 17、在1-39内取随机数expr $[RANDOM%39] +1RANDOM随机数%39取余数范围0-38 18、限制apache每秒新建连接数为1，峰值为3每秒新建连接数 一般都是由防火墙来做，apache本身好像无法设置每秒新建连接数，只能设置最大连接：iptables -A INPUT -d 172.16.100.1 -p tcp –dport 80 -m limit –limit 1/second -j ACCEPT 19、FTP的主动模式和被动模式FTP协议有两种工作方式：PORT方式和PASV方式，中文意思为主动式和被动式。 PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，客户端在命令链路上用PORT 命令告诉服务器：“我打开了XX端口，你过来连接我”。于是服务器从20端口向客户端的 XX端口发送连接请求，建立一条数据链路来传送数据。 PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，服务器在命令链路上用PASV 命令告诉客户端：“我打开了XX端口，你过来连接我”。于是客户端向服务器的XX端口 发送连接请求，建立一条数据链路来传送数据。从上面可以看出，两种方式的命令链路连接方法是一样的，而数据链路的建立方法就完 全不同。 20、显示/etc/inittab中以#开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行grep “^#{1,}[^]” /etc/inittab 21、显示/etc/inittab中包含了:一个数字:(即两个冒号中间一个数字)的行grep “:[0-9]{1}:” /etc/inittab 22、怎么把脚本添加到系统服务里，即用service来调用？在脚本里加入 #!/bin/bash chkconfig: 345 85 15 description: httpd然后保存chkconfig httpd –add 创建系统服务现在就可以使用service 来 start or restart 23、写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符 #!/bin/bash #description: useraddfor i in seq -f”%02g” 1 20;douseradd user$iecho “user$i-echo $RANDOM|md5sum|cut -c 1-5”|passwd –stdinuser$i &gt;/dev/null 2&gt;&amp;1done 24、写一个脚本，实现判断192.168.1.0/24网络里，当前在线的IP有哪些，能ping通则认为在线 #!/bin/bashfor ip in seq 1 255doping -c 1 192.168.1.$ip &gt; /dev/null 2&gt;&amp;1if [ $? -eq 0 ]; thenecho 192.168.1.$ip UPelseecho 192.168.1.$ip DOWNfi}&amp;donewait 25、写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本 [root@localhost tmp]# cat checksh.sh #!/bin/bashread -p “please input check script-&gt; ” fileif [ -f $file ]; thensh -n $file &gt; /dev/null 2&gt;&amp;1if [ $? -ne 0 ]; thenread -p “You input $file syntax error,[Type q to exit or Type vim to edit]” answercase $answer inq | Q)exit 0;;vim )vim $file;;*）exit 0;;esacfielseecho “$file not exist”exit 1fi 26、写一个脚本，要求如何： 创建一个函数，能接受两个参数：1)第一个参数为URL，即可下载的文件；第二个参数为目录，即下载后保存的位置；2)如果用户给的目录不存在，则提示用户是否创建；如果创建就继续执行，否则，函数返回一个51的错误值给调用脚本；3)如果给的目录存在，则下载文件；下载命令执行结束后测试文件下载成功与否；如果成功，则返回0给调用脚本，否则，返回52给调用脚本； [root@localhost tmp]# cat downfile.sh #!/bin/bashurl=$1dir=$2download(){cd $dir &gt;&gt; /dev/null 2&gt;&amp;1if [ $? -ne 0 ];thenread -p “$dir No such file or directory,create?(y/n)” answerif [ “$answer” == “y” ];thenmkdir -p $dircd $dirwget $url 1&gt; /dev/null 2&gt;&amp;1elsereturn “51”fifiif [ $? -ne 0 ]; thenreturn “52”fi}download $url $direcho $? 27、写一个脚本，详细需求如下： 1、创建一个函数，可以接受一个磁盘设备路径（如/dev/sdb）作为参数;在真正开始后面步骤之前提醒用户有危险，并让用户选择是否继续；而后将此磁盘设备上的所有分区清空（提示，使用命令dd if=/dev/zero of=/dev/sdb bs=512 count=1实现，注意其中的设备路径不要写错了；如果此步骤失败，返回67给主程序；接着在此磁盘设备上创建两个主分区，一个大小为100M，一个大小为1G；如果此步骤失败，返回68给主程序；格式化此两分区，文件系统类型为ext3；如果此步骤失败，返回69给主程序；如果上述过程都正常，返回0给主程序； 2、调用此函数；并通过接收函数执行的返回值来判断其执行情况，并将信息显示出来； local Darray=(ls /dev/sd[a-z])for i in ${Darray};do[[ “$i” == “$1” ]] &amp;&amp; Sd=$i &amp;&amp;breakdoneelsereturn66fi #当匹配成功，进入选择，告诉用户，是否继续，输错的话进入无限循环，当用户选择Y,则清空目标分区，且跳出while循环 while :;doread -p “Warning!!!This operation will clean $Sd data.Next=y,Quit=n [y|n]:” Choicecase $Choice iny)dd if=/dev/zero of=$Sd bs=512 count=1 &amp;&gt; /dev/null &amp;&amp;break || return 67 ;;n)exit 88 ;;*)echo “Invalid choice,please choice again.” ;;esacdone #使用echo传递给fdisk进行分区，如果此命令失败，则跳转出去，错误值68，需要注意的是，有时候这个返回值很诡异，笔者之前成功与否都是返回的1，后来重启之后，就好了，如果慎重的话，可以对创建的分区，进行判断，不过就需要使用其他工具截取相关字段了，虽有些小麻烦，但无大碍 echo-e “n\np\n1\n\n+100M\nn\np\n2\n\n+1024M\nw\n”|fdisk /dev/sdb&amp;&gt; /dev/null || || return 68 #格式化之前，让内核重新读取磁盘分区表，值得注意的是，有的系统版本，使用partprobe无效，譬如笔者的环境是rhel5.8，而rhel6.0以后，这个命令就很危险了，而使用partx -a /dev/sdb则效果更好…此项需慎重，如果格式化失败，则告知把失败的分区定义成变量，且跳出函数，并带出错误值69 partprobePart=fdisk -l /dev/$Sd|tail -2|cut -d” ” -f1for M in ${Part};domke2fs -j $M &amp;&gt; /dev/null &amp;&amp; ErrorPart=$M &amp;&amp;return 69donereturn 0} #下面代码，调用函数，接收函数返回值，根据返回值进行判断哪里出错。 Disk_Mod $1Res=$?[ $Res-eq 0 ] &amp;&amp; exit 0[ $Res-eq 66 ] &amp;&amp; echo “Error! Invalid input.”[ $Res-eq 67 ] &amp;&amp; echo “Error! Command -&gt; dd fdisk mke2fs 28、如何让history命令显示具体时间？HISTTIMEFORMAT=”%Y-%m-%d %H:%M:%S”export HISTTIMEFORMAT重新开机后会还原，可以写/etc/profile]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地yum仓库]]></title>
    <url>%2F2019%2F08%2F30%2Fyum%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[搭建本地仓库便于内部人员下载访问,节省资源时间. 服务端：第一个历程：创建yum仓库目录mkdir /local_yum 第二个历程：修改yum.conf配置文件，开启缓存keepcache=1 第三个历程：下载所需软件(根据自己需求下载)1.yum -y install rsync 2.yum -y install mariadb-server mariadb rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -ivh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 3.yum -y install php71w php71w-cli php71w-common php71w-devel \ php71w-embedded php71w-gd php71w-mbstring php71w-pdo php71w-xml php71w-fpm \ php71w-mysqlnd php71w-opcache php71w-mcrypt php71w-pecl-memcached php71w-pecl-mongodb php71w-pecl-redis vim /etc/yum.repos.d/nginx.repo​ [nginx-stable] ​ name=nginx stable repo ​ baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ ​ gpgcheck=1 ​ enabled=1 ​ gpgkey=https://nginx.org/keys/nginx_signing.key 4.yum install -y nginx 5.yum install -y nfs-utils rpcbind 6.yum -y install ansible 7.yum install -y httpd 8.yum install -y createrepo 第三个历程：上传rpm包到yum仓库目录 find /var/cache/yum/x86_64/7/ -type f -name “*.rpm”|xargs mv -t /local_yum 第四个历程：初始化yum仓库createrepo /local_yum 第五个历程：编写yum配置文件vim /etc/yum.repos.d/local_yum.repo [local_yum] name=local_yum baseurl=file:///local_yum enabled=1 priority=1 gpgcheck=0 第六个历程：配置nginx文件vim /etc/nginx/conf.d/local_yum.conf server { ​ listen 80; ​ server_name 10.0.0.61; ​ root /local_yum; ​ autoindex on; ​ index index.html index.htm; ​ error_page 500 502 503 504 /50x.html; ​ location / { ​ root /local_yum; ​ index index.html; ​ } } ~systemctl start nginx PS:**每次加入新的rpm包，更新yum仓库** createrepo –update /local_yum ====================================================================== 客户端第一个历程：编写yum配置文件vim /etc/yum.repos.d/local_yum.repo[local_yum] name=local_yum baseurl=http://10.0.0.61/ enabled=1 priority=1 gpgcheck=0 第二个历程: 安装yum源优先级插件yum install yum-plugin-priorities.noarch 第三个历程：启用插件vim /etc/yum/pluginconf.d/priorities.conf [main] enabled = 1 第四个历程：yum安装测试]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>本地yum仓库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令]]></title>
    <url>%2F2019%2F08%2F27%2Fming%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux 基础命令(小白入坑初阶) 1. 提示符1.1. 2. 帮助2.1. Help 命令帮助2.2. man man+命令 命令的详细信息、用法、格式。2.3. info 命令超级详细的帮助3. 系统关机重启3.1. shutdown3.1.1. shutdown -r 10 系统十分钟重启3.1.2. shutdown -r 0 系统立刻重启3.1.3. shutdown -r now 系统立刻重启3.1.4. shutdown -h 10 系统十分钟关机3.1.5. shutdown -h 0 系统立刻关机3.1.6. shutdown -h now 系统立刻关机3.1.7. shutdown -c 取消正在进行的命令3.2. reboot 重启3.3. poweroff 关机3.4. halt 关机3.5. init0 关机3.6. init 6 重启4. ctrl4.1. ctrl+c 取消当前操作、停止运行当前操作4.2. ctrl+l 清屏，当前画面命令较多时使用4.3. ctrl+d 退出当前登录用户、重新登录4.4. ctrl+r 查找历史命令4.5. ctrl+a 把光标移动到行首4.6. ctrl+e 把光标移动到行尾4.7. ctrl+u 把光标之前的内容删除4.8. ctrl+y 粘贴4.9. ctrl+k 把光标之后的内容删除4.10. ctrl+← 向左移动一个单词4.11. ctrl+→ 向右移动一个单词4.12. ctrl+s 锁屏4.13. ctrl+q 解锁5. 目录编辑5.1. Pwd 查看当前所在目录5.2. cd 切换目录5.2.1. cd~ 切换至家目录5.2.2. cd . 保持当前目录不变不变5.2.3. cd.. 返回上级目录5.2.4. cd - 切换至刚才的文件夹5.2.5. cd/ 直接切换到/目录5.3. tree 已树形图显示目录结构5.3.1. tree-L 1/2/3 看目录的层数5.3.2. tree -F 给目录+/ 区分文件和目录5.3.3. tree –d 只看目录5.4. mkdir 创建目录5.4.1. mkdir-p 创建递归目录5.5. ls 查看当前目录下的内容5.5.1. ls-l =ll 详细信息5.5.2. ls –t 按时间排序5.5.3. ls-r 时间倒序5.6. touch5.6.1. 创建文件 和更改时间5.7. cp copy 复制5.7.1. cp 要拷贝的文件 放在哪里· -r 递归 复制目录下所有的目录和文件 · -d 链接（相当于win7 10 快捷方式） · -p 复制后保留原始的文件属性 · -a 相当于-pdr · \cp 不提示是否覆盖 5.8. move5.8.1. mv 文件或目录 要放在哪里5.9. rm删除目录或文件5.9.1. -f 强制删除 不提示5.9.2. -r 递归删除5.10. Vi 编辑5.11. Echo 写入文档6. 命令行命令6.1. mount 挂载6.1.1. umount 卸载6.1.2. -f 强制卸载6.2. df 查看磁盘使用6.2.1. -h 人类可读方式显示磁盘使用空间大小 K M G6.3. hostname 查看主机名称6.3.1. -I 查看或者获取IP地址6.4. hostnamectl set-hostname 主机名称6.4.1. 修改主机名 （centos 7）6.5. yum -y install 安装软件6.6. yum remove yum 卸载软件6.7. rpm -ivh 包的名字 安装rpm包6.8. rpm -e rpm 卸载6.9. yum list 查看可安装的包6.10. yum repolist 查看所有的安装包的个数6.11. rpm –qa 查看已安装的包6.12. rpm –ql 查询软件安装的所有的文件位置 详细信息6.13. grep +内容 过滤自己想要的内容6.14. lscpu 查看cpu信息6.15. free 查看内存的信息6.15.1. -h 以人类可读6.16. w 查看负载信息6.17. Uptime 查看负载信息6.18. Top 查看实时负载信息 q退出或者ctrl + c 结束进程6.19. Which 查看命令的路径 或者查看是否安装6.20. Getenforce 查看selinux状态6.21. setenforce 0 0是关闭 1是开启 临时关闭selinux 重启失效6.22. systemctl status 服务名 查看服务的状态信息6.23. iptables-save如果出内容 说明开启的 不出内容 就是关闭状态6.24. stat +文件 查看详细信息 三个时间6.25. ifdown eth0 关闭网卡（centos6） ifup eth0 启动网卡 （centos6）7. 特殊符号7.1. .. 返回上一层目录7.2. . 代表当前路径7.3. ~ 家目录7.4. # 注释7.5. - 上一次所在的目录7.6. &gt; {重定向}7.7. &gt;&gt;{追加重定向}7.8. \ 脱掉马甲7.9. &amp;&amp; 前面的命令执行成功 则执行后面的命令7.10. | 管道符 前面的命令结果导入到后面的命令8. vim 快捷键8.1. 光标移动 命令行模式8.1.1. G 文件的最底部8.1.2. gg 1G 快速到行首8.1.3. 10G 快速移动到第十行8.1.4. ^ home 移动到行首8.1.5. $ end 移动到行尾8.1.6. h j k l8.1.7. ↑ ↓ ← →8.2. 编辑命令行8.2.1. yy 复制一行内容· 3yy 复制光标以下3行 8.2.2. p 粘贴内容8.2.3. dd 删除光标所在行8.2.4. 3dd 删除光标以下3行8.2.5. D删除光标往后的当前行8.2.6. C删除光标往后进入编辑模式8.2.7. d + 0 删除光标到行首8.2.8. u 撤销操作8.3. 编辑模式8.3.1. o 在光标下一行进入编辑模式8.3.2. dw 删除一个单词 两个特殊字符之间的内容8.3.3. O 大写o 光标所在行上一行进入编辑模式9. 查找文件命令9.1. find / -type f -name “文件名”9.2. find / -type d -name “目录名]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos6、centos7开机启动流程]]></title>
    <url>%2F2019%2F08%2F27%2Fkai%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E3%80%81%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[centos6、centos7开机启动流程 centos6 centos7 按下电源 按下电源 开机自检BIOS 开机自检BIOS MBR引导 MBR引导 GRUB菜单 GRUB菜单 加载内核kernel 加载内核kernel 运行INIT进程 运行systemd进程 读取/etc/inintab 选择启动级别/etc/systemd/system/default.target 读取/etc/rc.sysinit初始化系统 初始化脚本 运行/etc/rc数字.d的脚本/服务 并行启动服务 启动mingetty显示登录界面 启动mingetty centos6、centos7开机启动流程开机启动流程、用户管理一、 让一个程序开机启动有什么方法：1./etc/rc.local 开机启动脚本或命令，放入即可。2.通过chkconfig命令管理 你要启动的脚本/服务。（远控卡）二、二用户分类1.UID user id 身份证号码2.GID geoup id 用户组ID3.root 皇帝ID UID：04.虚拟用户：傀儡用户UID 1-499 （centos7 1-999）​ 用户的命令解释器：/sbin/nologin ​ 每个用户、服务运行的时候都需要一个用户 ​ 傀儡用户不需要登录系统 5.普通用户 UID 500+ （centos7 1000+）三.用户相关配置文件1./etc/passwd 用户信息12root: x: 0: 0: root: /root: /bin/bash用户名 密码 UID GID 用户的说明 家目录 命令解释器 2./etc/shadow 用户密码信息3./etc/geoup用户组信息4./etc/gshadow 用户组密码信息四.用户相关的目录/etc/skel 新用户的老家的模板（新用户家目录的样子） 存放新建用户的目录（创建新用户后会把这个目录下的文件拷贝到新用户的家目录下） 登录到普通用户下突然发现-bash-4.2$解决办法： 五.用户管理的命令1.用户相关命令：1.1.useradd：useradd 添加用户​ -u 指定UID​ -s 指定登录shell​ /bin/bash​ /bin/nologin​ -g 指定GID，用户组​ -M 不创建家目录 1.2.userdel 删除用户 （不要删除 要注释就OK）​ -r 删除家目录​ userdel oldboy 只删除用户 不删除家目录​ userdel -r oldboy 同家目录一起删除 （注：工作中再passwd中注释#用户就可以了，不要删除。） 1.3.usermod 修改用户信息​ -s 修改shell ​ -g 属于的家庭，用户组 （主要组） ​ -G属于多个家庭 （附加组） 2.批量创建用户及密码2.1创建十个用户 密码均为123456sed awk 2.2非交互式创建密码echo **|passwd –stdin 用户 2.3 生成随机数（随机密码）2.31 echo $((RANDOM))​ 随机生成0-32767数字，有重复的可能。可加指纹。echo $((RANDOM)) |md5sum ​ 取余 echo $((RANDOM%10)) 只选0-9 2.32 /dev/urandom ​ 可加指纹 md5sum 2.33 date​ date +%N 纳秒 按照纳秒在变化。可加指纹date +%N|md5sum 2.34uuidgen 随机的uuid 可以tr替换 2.4创建十个用户并且配十个随机密码创建八位随机密码 赋值给pass 12pass=`date +%N|md5sun|cut -c1-8`pass=$(date +%N|md5sum|cut -c1-8) 两种方法皆可 创建stu{1..10}用户-给每个用户八位不同随机密码-用户密码存入pass.txt中。 sed 1echo stu&#123;1..10&#125;|xargs -n1|sed -r &apos;s#(.*)#useradd \1;pass=$(date +%N|md5sum|cut -c1-8);echo $pass \1 &gt;&gt;pass.txt;echo $pass|passwd --stdin \1#g&apos;|bash awk 1echo stu&#123;1..10&#125;|xargs -n1|awk &apos;&#123;print &quot;useradd &quot; $0 &quot; ; pass=$(date +%N|md5sum|cut -c1-8)&quot;&quot; ;&quot; &quot;echo $pass &quot;$1&quot; &gt;&gt;pass.txt&quot; &quot; ;&quot; &quot;echo $pass|passwd --stdin &quot;$1&quot;&quot; &apos;&#125;|bash 2.5批量删除用户（有序） 六.修改hhd端口(禁止root用户远程登录 ) 进入vim /etc/ssh/sshd_config 默认22端口 #port 22 底下加一行 port 端口 修改完成以后重新加载或者重启sshd 分析日志 查看/var/log/secure 安全日志 failure或Failed七.给文件加指纹1. md5sum 1.txt &gt; police.md5​ 给1.txt生成一个指纹 并且把指纹放入police.md5中 2. md5sum -c police.md5​ 查看指纹是否有变化 ​ 有变化就修改过了 chown 修改文件或者目录所有者和术语的用户组。 12格式：chown lizhenya.lizhenya /tmp/1.txt 属主 属组 文件 -R 递归 chown -R lizhenya * w的使用方法 sudosudo -l 查看当前用户是否有sudo visudo ===== vim /etc/sudoers lizhenya ALL=(ALL) /usr/bin/ls授权的命令 必须跟全路径 sudo -k 清空缓存密码NOPASSWD 不需要密码 lizhenya ALL=(ALL) NOPASSWD:ALL 八.文件权限1.权限体系1234567891011121.文件对应权限r===read 可读w===wirte 可写x===execute 可执行如何查看当前用户对某个文件或目录有什么权限ll /etc/hosts-rw-r--r-- 等信息2.权限的计算r===4w===2x===1-===0 2.修改文件权限 chmod12345678910111213141516171819属主 属组 其他用户user group othersu g o方法一:例:属主去掉写入权限使用chmod u-w 1.sh例:属主同时给rwx权限 = 先清除在赋值权限chmod u=rwx 1.sh例:属主 属组 其他用户同时增加x执行权限chmod ugo+x 1.sh例:同时删除x执行权限 a=ugo (a=all)chmod a-x 1.sh例:使用a对所有用户增加x执行权限chmod a+x 1.sh方法二:使用数字进行权限修改(常用)例: 文件修改为644权限 rw-r--r—chmod 644 1.sh例：文件修改为755权限 rwx-r-xr-xchmod 755 1.sh 3.文件权限总结1231. r 显示文件内容2. w 是否能修改文件的内容 需要有r权限配合 只有w的时候 保存退出会导致文件内容清空3. x是否有执行权限 需要有r可读权限配置 4.目录权限总结12345671. r是否能查看目录的内容ls2. w是否能在目录中创建 删除 重命名 文件权限3. x 是否有进入目录的权限 cd4. 注意(目录权限):1. r 是否能查看目录内容ls 需要x权限配合2. w 是否能在目录中创建删除 重命名 文件权限 需要x权限配合3. .x 是否能进入到目录权限 cd 是否能修改或查看目录中文件属性 Linux文件和目录权限总结 权限拒绝排查流程]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[防火墙]]></title>
    <url>%2F2019%2F08%2F27%2Ffang%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[iptables 相关使用规则,4表伍链 防火墙1 防火墙种类及使用说明硬件三层路由深信服Juniper 软件iptablesfirewalld 云防火墙阿里云:安全组 2 必须熟悉的名词容器: 瓶子 罐子 存放东西表(table): 存放链的容器链(chain): 存放规则的容器规则(policy): 准许或拒绝规则 Netfilter 表（tables） 链（chains） 规则（Policy） 小区 楼房 房子 家具 3 iptables 执行过程工作流程小结： 防火墙是层层过滤的，实际是按照配置规则的顺序从上到下，从前到后进行过滤的。 如果匹配上规则，即明确表示是阻止还是通过，数据包就不再向下匹配新的规则。 如果规则中没有明确表明是阻止还是通过的，也就是没有匹配规则，向下进行匹配，直到匹配默认 规则得到明确的阻止还是通过。 防火墙的默认规则是所有规则执行完才执行的。 4.表伍链( 4表伍链 ) filter表 强调：主要和主机自身相关，真正负责主机防火墙功能的（过滤流入流出主机的数据包） filter表示iptables默认使用的表，这个表定义了三个链（chains） 企业工作场景：主机防火墙 INPUT 负责过滤所有目标地址是本机地址的数据包 通俗来说：就是过滤进入主机的数据包 FORWARD 负责转发流经主机的数据包。起转发的作用，和NAT关系很大，后面会详细介绍LVS NAT模式，net.ipv4.ip_forward=0 OUTPUT 处理所有源地址是本机地址的数据包 通俗的讲：就是处理从主机发出去的数据包 NAT表 负责网络地址转换的，即来源与目的IP地址和port的转换。应用：和主机本身无关，一般用于局域网共享上网或者特殊的端口转换服务相关。工作场景：1. 用于企业路由（zebra）或网关（iptables），共享上网（POSTROUTING）2. 做内部外部IP地址一对一映射（dmz），硬件防火墙映射IP到内部服务器，ftp服务（PREROUTING）3. WEB，单个端口的映射，直接映射80端口（PREROUTING） 这个表定义了3个链，nat功能相当于网络的acl控制。和网络交换机acl类似。 OUTPUT 和主机放出去的数据包有关，改变主机发出数据包的目的地址。 PREROUTING 在数据包到达防火墙时，进行路由判断之前执行的规则，作用是改变数据包的目的地址、目的端口等就是收信时，根据规则重写收件人的地址。例如：把公网IP：xxx.xxx.xxx.xxx映射到局域网的xx.xx.xx.xx服务器上。如果是web服务，可以报80转换为局域网的服务器9000端口上10.0.0.61 8080(目标端口) —-nat—à 10.0.0.7 22 POSTROUTING 在数据包离开防火墙时进行路由判断之后执行的规则，作用改变数据包的源地址，源端口等。写好发件人的地址，要让家人回信时能够有地址可回。例如。默认笔记本和虚拟机都是局域网地址，在出网的时候被路由器将源地址改为了公网地址。生产应用：局域网共享上网。 5.环境准备及命令5.1iptables iptables启动或关闭的命令123456yum install -y iptables-services[root@m01 ~]# rpm -ql iptables-services/etc/sysconfig/ip6tables/etc/sysconfig/iptables #防火墙的配置文件/usr/lib/systemd/system/ip6tables.service/usr/lib/systemd/system/iptables.service #防火墙服务配置文件(命令) 12345678防火墙相关模块 加载到内核中modprobe ip_tablesmodprobe iptable_filtermodprobe iptable_natmodprobe ip_conntrackmodprobe ip_conntrack_ftpmodprobe ip_nat_ftpmodprobe ipt_state 1234567891011[root@m01 ~]# lsmod |egrep &apos;filter|nat|ipt&apos;nf_nat_ftp 12770 0nf_conntrack_ftp 18638 1 nf_nat_ftpiptable_nat 12875 0nf_nat_ipv4 14115 1 iptable_natnf_nat 26787 2 nf_nat_ftp,nf_nat_ipv4nf_conntrack 133053 6nf_nat_ftp,nf_nat,xt_state,nf_nat_ipv4,nf_conntrack_ftp,nf_conntrack_ipv4iptable_filter 12810 0ip_tables 27126 2 iptable_filter,iptable_natlibcrc32c 12644 3 xfs,nf_nat,nf_conntrack 5.2.iptables命令参数 -L 显示表中的所有规则 -D delete 删除 -n 不要把端口 或ip反向解析为 名字 -I 追加规则到表首 insert 拒绝的规则 -t 指定表 -p 指定协议 protocal 协议 tcp/udp/icmp/all -A 追加规则到末尾 准许 ACCEPT –dport 指定目标端口 -F 清除所有规则，不会处理默认的规则 –sport 指定源端口 -X 清楚自定义链 -s –source指定IP源地址 -Z 链的计数器清零（数据包计数器与数据包字节计数器） -d –destination 指定IP目标地址 –line-num 显示表中规则行数 -j 指定动作,DROP/ACCEPT/REJECT -m 指定模块 6.配置filter表规则6.1.禁止访问22端口1iptables -t filter -A INPUT -p tcp --1 dport 22 -j DROP 删除 规则 -D 6.2.禁止网段连入（禁止10.0.0.0网段访问 8080端口）123456iptables -I INPUT -s 10.0.0.0/24 -p tcp --dport 8080 -j DROP[root@web01 ~]# ssh 10.0.0.61 hostname^C[root@web01 ~]# ssh 172.16.1.61 hostnameroot@172.16.1.61's password:m01 6.3.只允许指定网段连入（允许10.0.0.0网段）1iptables -I INPUT ! -s 10.0.0.0/1 24 -j DROP 6.4.指定多个端口12345指定多个端口加模块:[root@m01 ~]# iptables -I INPUT -p tcp -m multiport ! --dport 80,443 -jDROP指定端口范围,不用加模块:[root@m01 ~]# iptables -I INPUT -p tcp --dport 1024:65535 -j DROP 6.5匹配ICMP类型ICMP（Internet Control Message Protocol）Internet控制报文协议通过内核参数 控制 禁止被ping 12345[root@m01 ~]# cat /etc/sysctl.conf#/proc/sys/net/ipv4/icmp_echo_ignore_allnet.ipv4.icmp_echo_ignore_all = 1[root@m01 ~]# sysctl -pnet.ipv4.icmp_echo_ignore_all = 1 通过防火墙规则 控制是否可以ping 1234567891011[root@m01 ~]# iptables -I INPUT -p icmp --icmp-type 8 -j DROP[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationDROP icmp -- 0.0.0.0/0 0.0.0.0/0 icmptype 8Chain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination 6.6 匹配网络状态（TCP/IP连接状态）1234567-m state --stateNEW：已经或将启动新的连接ESTABLISHED：已建立的连接RELATED：正在启动的新连接INVALID：非法或无法识别的iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPTiptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT 6.7 限制并发及速率123iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPTiptables -I INPUT -p icmp --icmp-type 8 -m limit --limit 6/min --limit-burst5 -j ACCEPT -m limit –limit n/{second/minute/hour}:解释：指定时间内的请求速率”n”为速率，后面为时间分别为：秒 分 时–limit-burst [n]解释：在同一时间内允许通过的请求”n”为数字，不指定默认为5 6.8 防火墙规则的保存与恢复1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@m01 ~]# cat /etc/sysconfig/iptables# sample configuration for iptables service# you can edit this manually or use system-config-firewall# please do not ask us to add additional ports/services to this defaultconfiguration*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT[root@m01 ~]# iptables-save &gt; /etc/sysconfig/iptables[root@m01 ~]#[root@m01 ~]# cat /etc/sysconfig/iptables# Generated by iptables-save v1.4.21 on Wed Jul 24 23:28:23 2019*filter:INPUT ACCEPT [341:28194]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [271:30712]-A INPUT -p icmp -m icmp --icmp-type 8 -j DROPCOMMIT# Completed on Wed Jul 24 23:28:23 2019[root@m01 ~]# #恢复[root@m01 ~]# #重启防火墙[root@m01 ~]# iptables -F[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT) target prot opt source destination[root@m01 ~]#[root@m01 ~]# iptables-restore &lt;/etc/sysconfig/iptables[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationDROP icmp -- 0.0.0.0/0 0.0.0.0/0 icmptype 8Chain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination 6.9 实际生产用法1.ssh可以连接进来12345678910111213141516171819[root@m01 ~]# iptables -F[root@m01 ~]# iptables -X[root@m01 ~]# iptables -Z[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination[root@m01 ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22Chain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination 2.设置允许本机lo通讯规则允许本机回环lo接口数据流量流出与流入 12iptables -A INPUT -i lo -j ACCEPTiptables -A OUTPUT -o lo -j ACCEPT 3.配置默认规则及 放行 80 443端口12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[root@m01 ~]# iptables -P INPUT DROP[root@m01 ~]# iptables -P FORWARD DROP[root@m01 ~]# iptables -P OUTPUT ACCEPT[root@m01 ~]# iptables -A INPUT -m multiport -p tcp --dport 443,80 -jACCEPT[root@m01 ~]# iptables -nLChain INPUT (policy DROP)target prot opt source destinationACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22ACCEPT all -- 0.0.0.0/0 0.0.0.0/0ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 multiport dports 443,80Chain FORWARD (policy DROP)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationACCEPT all -- 0.0.0.0/0 0.0.0.0/0[root@m01 ~]# iptables -A INPUT -s 10.0.0.0/24 -j ACCEPT[root@m01 ~]# iptables -A INPUT -s 172.16.1.0/24 -j ACCEPT[root@m01 ~]#[root@m01 ~]# iptables -nLChain INPUT (policy DROP)target prot opt source destinationACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22ACCEPT all -- 0.0.0.0/0 0.0.0.0/0ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 multiportdports 443,80ACCEPT all -- 10.0.0.0/24 0.0.0.0/0ACCEPT all -- 172.16.1.0/24 0.0.0.0/0Chain FORWARD (policy DROP)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationACCEPT all -- 0.0.0.0/0 0.0.0.0/0[root@m01 ~]# iptables-save# Generated by iptables-save v1.4.21 on Wed Jul 24 23:42:00 2019*filter:INPUT DROP [0:0]:FORWARD DROP [0:0]:OUTPUT ACCEPT [24:3008]-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m multiport --dports 443,80 -j ACCEPT-A INPUT -s 10.0.0.0/24 -j ACCEPT-A INPUT -s 172.16.1.0/24 -j ACCEPT-A OUTPUT -o lo -j ACCEPTCOMMIT# Completed on Wed Jul 24 23:42:00 2019 7.配置nat表规则123456789101112131415161718192021222324[root@m01 ~]# iptables -P INPUT ACCEPT[root@m01 ~]# iptables -P FORWARD ACCEPT[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationDROP icmp -- 0.0.0.0/0 0.0.0.0/0 icmptype 8ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22ACCEPT all -- 0.0.0.0/0 0.0.0.0/0ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 multiport dports 443,80ACCEPT all -- 10.0.0.0/24 0.0.0.0/0ACCEPT all -- 172.16.1.0/24 0.0.0.0/0Chain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationACCEPT all -- 0.0.0.0/0 0.0.0.0/0[root@m01 ~]# iptables -F[root@m01 ~]# iptables -nLChain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination 7.1实现共享上网※※※※※ 1.防火墙配置123456[root@m01 ~]# iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT --to-source 10.0.0.61[root@m01 ~]# echo 'net.ipv4.ip_forward = 1' &gt;&gt; /etc/sysctl.conf[root@m01 ~]# sysctl -pnet.ipv4.icmp_echo_ignore_all = 0net.ipv4.ip_forward = 1 注意事项: 公网ip不固定: iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j MASQUERADE 2.web配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263[root@web01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0TYPE=EthernetBOOTPROTO=noneNAME=eth0DEVICE=eth0ONBOOT=no #禁用eth0IPADDR=10.0.0.7PREFIX=24GATEWAY=10.0.0.254DNS1=223.5.5.5GATEWAY=10.0.0.254[root@web01 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth1TYPE=EthernetIPADDR=172.16.1.7PREFIX=24NAME=eth1DEVICE=eth1ONBOOT=yesGATEWAY=172.16.1.61 #网关改成外网机器网址DNS1=1.2.4.8[root@web01 ~]# systemctl restart network[root@m01 ~]# ssh 172.16.1.7Last login: Wed Jul 24 23:06:58 2019 from 10.0.0.1[root@web01 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN groupdefault qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft foreverinet6 ::1/128 scope hostvalid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN groupdefault qlen 1000link/ether 00:0c:29:b2:e3:7e brd ff:ff:ff:ff:ff:ff3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast stateUP group default qlen 1000link/ether 00:0c:29:b2:e3:88 brd ff:ff:ff:ff:ff:ffinet 172.16.1.7/24 brd 172.16.1.255 scope global eth1valid_lft forever preferred_lft foreverinet6 fe80::20c:29ff:feb2:e388/64 scope linkvalid_lft forever preferred_lft forever[root@web01 ~]# ping baidu.comPING baidu.com (220.181.38.148) 56(84) bytes of data.64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=1 ttl=127 time=8.90ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=2 ttl=127 time=7.52ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=3 ttl=127 time=9.28ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=4 ttl=127 time=9.36ms^C--- baidu.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3006msrtt min/avg/max/mdev = 7.528/8.769/9.364/0.746 ms[root@web01 ~]# ping 1.2.4.8PING 1.2.4.8 (1.2.4.8) 56(84) bytes of data.64 bytes from 1.2.4.8: icmp_seq=1 ttl=127 time=76.4 ms64 bytes from 1.2.4.8: icmp_seq=2 ttl=127 time=76.8 ms^C--- 1.2.4.8 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 76.440/76.637/76.834/0.197 ms 3.完成后 在web01 发出 ip r和ping 外网ip的结果12345678910111213141516171819202122[root@web01 ~]# ip rdefault via 172.16.1.61 dev eth1169.254.0.0/16 dev eth1 scope link metric 1003172.16.1.0/24 dev eth1 proto kernel scope link src 172.16.1.7[root@web01 ~]# route -nKernel IP routing tableDestination Gateway Genmask Flags Metric Ref UseIface0.0.0.0 172.16.1.61 0.0.0.0 UG 0 0 0eth1169.254.0.0 0.0.0.0 255.255.0.0 U 1003 0 0eth1172.16.1.0 0.0.0.0 255.255.255.0 U 0 0 0eth1[root@web01 ~]# ping baidu.comPING baidu.com (39.156.69.79) 56(84) bytes of data.64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=1 ttl=127 time=21.7 ms64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=2 ttl=127 time=32.6 ms^C--- baidu.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 21.781/27.214/32.647/5.433 ms 7.2.实现端口转发※※※※※ 1234567891011121314[root@m01 ~]# iptables -t nat -A PREROUTING -d 10.0.0.61 -p tcp --dport9000 -j DNAT --to-destination 172.16.1.7:22[root@m01 ~]# iptables -nL -t natChain PREROUTING (policy ACCEPT)target prot opt source destinationDNAT tcp -- 0.0.0.0/0 10.0.0.61 tcp dpt:9000to:172.16.1.7:22Chain INPUT (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationChain POSTROUTING (policy ACCEPT)target prot opt source destinationSNAT all -- 172.16.1.0/24 0.0.0.0/0 to:10.0.0.61 测试与检查本地shell中 [d:~]$ ssh 1 root@10.0.0.61 9000 7.3实现ip映射12345678910111213141516ip a add 10.0.0.62/24 dev eth0 label eth0:0[root@m01 ~]# iptables -t nat -A PREROUTING -d 10.0.0.62 -j DNAT --todestination172.16.1.7[root@m01 ~]# iptables -nL -t natChain PREROUTING (policy ACCEPT)target prot opt source destinationDNAT tcp -- 0.0.0.0/0 10.0.0.61 tcp dpt:9000to:172.16.1.7:22DNAT all -- 0.0.0.0/0 10.0.0.62 to:172.16.1.7Chain INPUT (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destinationChain POSTROUTING (policy ACCEPT)target prot opt source destinationSNAT all -- 172.16.1.0/24 0.0.0.0/0 to:10.0.0.61 练习题:5、请写出查看iptables当前所有规则的命令。iptables-saveiptables -nLiptables -nL -t nat 6、禁止来自10.0.0.188 ip地址访问80端口的请求 iptables -I INPUT -s 10.0.0.188 -p tcp –dport 1 80 -j DROP 7、如何使在命令行执行的iptables规则永久生效？ iptables-save/etc/sysconfig/iptables 8、实现把访问10.0.0.3:80的请求转到172.16.1.17:80 iptables -t nat -A PREROUTING -d 10.0.0.3 -p tcp –dport 80 -j DNAT–to-destination 172.16.xxxx:80 9、实现172.16.1.0/24段所有主机通过124.32.54.26外网IP共享上网。 iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT –tosource123.32.54.26iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -j SNAT MASQUERADE 补充资料:面试题:让1个服务开机自启动 有什么方法 https://www.jianshu.com/p/fc26d73fe050【不会别做运维了】CentOS 6 VS 7 区别 https://www.jianshu.com/p/d6d9a49e95c9 总结练习题:【面试题】老男孩教育防火墙企业面试题iptalbeshttps://www.jianshu.com/p/19422676b854防火墙 笔试题 www.jianshu.com/p/2180face8381]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[综合架构]]></title>
    <url>%2F2019%2F08%2F27%2Fzong%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[综合架构服务器配制方法 一、综合架构的组成部分： 1）防火墙服务器 实现访问流量安全控制 iptables（docker）/firewalld 2）负载均衡服务器 实现访问流量调度处理 nginx 3）web服务器 实现处理用户请求 nginx 4）数据库服务器 实现数据信息存储（字符串） mysql 5）存储服务器 实现数据信息存储（图片/附件） NFS 6）备份服务器 实现数据信息备份 rsync（自动备份 shell+定时任务/sersync实时备份） 7）缓存服务器* 实现数据内存存储 memcache/redis/mongodb 8）批量管理服务器 实现服务器批量管理 ansible 9）监控服务器 实现监控服务运行状态/报警 zabbix架构完善部分：1）解决单点问题 实现主备服务器切换 keepalived 2）VPN服务器 远程技术人员身份 pptpvpn （扩展研究） https://blog.gurenyunedu.com/?s=vpn 3）审计服务器 监控内部人员的所有操作 jumpserver（跳板机）二、虚拟机架构规划1.虚拟机的配置1234567891011主机名称和IP地址规划 10台服务器 内存--10G 负载均衡服务器 lb01 10.0.0.5/24（外网）172.16.1.5/24（内网） lb02 10.0.0.6/24（外网）172.16.1.6/24（内网） web服务器 web01 10.0.0.7/24（外网）172.16.1.7/24（内网） web02 10.0.0.8/24（外网）172.16.1.8/24（内网） web03 10.0.0.9/24（外网）172.16.1.9/24（内网） 数据库服务器 db01 10.0.0.51/24（外网）172.16.1.51/24（内网） 存储服务器 nfs01 10.0.0.31/24（外网）172.16.1.31/24（内网） 备份服务器 backup 10.0.0.41/24（外网）172.16.1.41/24（内网） 批量管理服务器 m01 10.0.0.61/24（外网）172.16.1.61/24（内网） 监控管理服务器 zabbix-server 10.0.0.71/24（外网）172.16.1.71/24（内网） 2.主机（模板机）系统优化123456701. 安全优化 防火墙关闭（永久） selinux关闭（永久） 02. yum镜像源 阿里云镜像源 清华yum源 03. 优化hosts文件 3.虚拟主机（模板机）网络配置12345678 第一个步骤：创建第二块网卡，设置LAN区段 172.16.1.0第二个步骤：开启服务器，对第二块网卡进行地址配置 nmtui--systemctl restart NetworkManager --- systemctl restart network第三个步骤：清除网卡的mac地址信息和UUID sed -i &apos;/UUID/d&apos; /etc/sysconfig/network-scripts/ifcfg-eth[01]第四个步骤：重启网卡服务 systemctl stop/disable NetworkManager systemctl restart network 4.虚拟主机的克隆操作1234567891011第一个步骤：模板主机链接克隆 第二个步骤：需要对克隆好的主机进行配置 1）网卡地址修改 sed -i &apos;s#200#41#g&apos; /etc/sysconfig/network-scripts/ifcfg-eth[01] 2）修改主机名称 hostnamectl set-hostname backup 3）建立新的xshell会话 systemctl restart network 完整快照拍摄工作 PS：克隆好的主机要一台一台启动配置 三、综合架构备份服务ps:作用121. 用于将数据信息进行恢复2. 用于出现问题进行文件信息对比 1.如何实现备份服务部署–rsync12345rsync软件可以实现全量和增量备份 （优势） 增量备份是如何实现的？ 两种方式：数学算法--数据比对 第一种：比对文件数据属性信息（默认） 第二种：比对文件md5数值 12345678910111213141516171819202122rsync软件 cp scp rm ls 1v4rsync替换cp： cp /etc/hosts /tmp/ --- 备份文件 rsync /etc/hosts /tmp/ --- 备份文件 rsync -a /gurenyun /tmp --- 备份目录 PS：rsync备份目录时 目录后面有/ gurenyun/ 将目录下面的数据信息进行备份 目录后面没有/ gurenyun 将目录下面的内容以及目录备份都进行备份 rsync替换scp：远程备份 scp -rp /etc/hosts 172.16.1.31:/tmp --- 远程传输备份文件 rsync -rp /etc/hosts 172.16.1.31:/tmp （只有备份服务器开启rsync即可。）rsync替换rm： mkdir /null rsync -avz --delete /null/ /tmp --- 将目录中的数据进行删除或者清空 --delete 无差异同步参数 rsync替换ls： rsync /etc/hosts -rw-r-xr-x 391 2019/06/11 09:36:15 hosts 2.rsync命令详细用法说明12345678910111213141516171819202122232425262728293031323334353637383940414243实现本地数据备份：等价于cp Local: rsync [OPTION...] SRC... [DEST] src：需要备份的数据信息 dest：备份到什么路径中实现远程的方式备份：类似scp（全量备份） Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST] [USER@]： 以什么用户身份登录到远程主机，默认以当前登录用户身份登录远程主机 HOST： 远程主机IP地址或者主机名称信息 SRC： 需要拉取的远程主机数据信息 dest： 数据保存到本地主机的路径信息 EX: rsync -avz root@172.16.1.31:/etc/hosts ~ Push: rsync [OPTION...] SRC... [USER@]HOST:DEST SRC： 需要推送的本地主机数据信息 [USER@] 以什么用户身份登录到远程主机，默认以当前登录用户身份登录远程主机 HOST： 远程主机IP地址或者主机名称信息 DEST： 数据保存到远程主机的路径信息 EX：rsync -avz /etc/hosts root@172.16.1.31:~采用守护进程方式进行数据传输（远程方式） Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST] rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST] EX： rsync -avz rsync_backup@172.16.1.41::backup/passwd ~ Push: rsync [OPTION...] SRC... [USER@]HOST::DEST rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST EX： rsync -avzP /etc/hosts rsync_backup@172.16.1.41::backup src: 需要推送的本地主机数据信息 [USER@]: 输入正确认证用户信息 HOST： 远程主机IP地址或者主机名称信息 ::DEST 指定备份数据的模块信息 优点： 1. 可以实现免交互传输数据 2. 实现远程传输认证功能 3. 守护进程方式具有配置文件，满足更多企业需求 4. 控制客户端连接服务端的数量 3.rsync守护进程的部署过程服务端部署流程： 第一步 确认软件是否安装 rpm -qa rsync 第二步 未安装，安装 yum install -y rsync 第三步 编写配置文件 vim /etc/rsyncd.conf 第四步 创建备份管理用户 useradd rsync -s /sbin/nologin -M 第五步 创建认证密码 放入passwordd文件 echo “rsync_backup:gurenyun123” &gt;/etc/rsync.password 第六步 修改password 文件权限 chmod 600 /etc/rsync.password 第七步 创建备份目录 mkdir /backup 第八步 修改目录属组属主权限 chown rsync.rsync /backup/ 第九步 启动备份服务 systemctl start rsyncd systemctl enable rsyncd 第十步 检查服务进程是否存在 ps ef|grep rsync 第十步 检查服务进程端口信息 netstat -intup 客户端部署流程： 第一步 确认软件是否安装 rpm -qa rsync 第二步 未安装，安装 yum install -y rsync 第三步 创建密码文件 echo “gurenyun123” &gt;/etc/rsync.password 第四步 修改密码文件权限 chmod 600 /etc/rsync.password 第五步 备份数据传输 rsync -avzP /etc/hosts rsync_backup@172.16.1.41::backup 实现免交互传输数据（免秘钥） rsync -avzP /etc/hosts rsync_backup@172.16.1.41::backup –password-file=/etc/rsync.password 配置文件：#rsync_config #created by HQ at 2017 ##rsyncd.conf start##uid = rsyncgid = rsyncport = 873 #fake super = yesuse chroot = nomax connections = 200timeout = 300pid file = /var/run/rsyncd.pidlock file = /var/run/rsync.locklog file = /var/log/rsyncd.logignore errorsread only = falselist = falsehosts allow = 172.16.1.0/24hosts deny = 0.0.0.0/32auth users = rsync_backupsecrets file = /etc/rsync.password[backup]comment = “backup dir by gurenyun”path = /backup 配置文件解析：​ #rsync_config​ #created by HQ at 2017​ ##rsyncd.conf start##​ uid = rsync — 备份目录的管理用户（属主信息）？？？​ gid = rsync — 备份目录的管理用户（属组信息）？？？​ port = 873 — rsync守护进程服务端口号​ fake（伪装） super = yes — ？？？​ use chroot = no — 和安全相关配置​ max connections = 200 — 最大连接数​ timeout = 300 — 设置连接的超时时间​ pid file = /var/run/rsyncd.pid — 记录服务的进程号码信息（停止服务/判断服务是否启动）​ lock file = /var/run/rsync.lock — 锁文件，进行连接的限制​ log file = /var/log/rsyncd.log — 服务的日志文件​ ignore errors — 忽略错误，提高传输数据效率​ read only = false — 设置备份目录是可读可写​ list = false — ？？？​ hosts allow = 172.16.1.0/24 — 白名单（允许指定网段或者主机）​ hosts deny = 0.0.0.0/32 — 黑名单（拒绝指定网段或者主机）​ auth users = rsync_backup — 指定认证的用户​ secrets file = /etc/rsync.password — 创建一个密码文件（用户名称:用户密码）​ [backup] — 模块信息​ comment = “backup dir by gurenyun”​ path = /backup — 指定备份目录路径信息 4.Rsync服务常见问题汇总讲解：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411. rsync服务端开启的iptables防火墙 【客户端的错误】 No route to host 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup rsync: failed to connect to 172.16.1.41: No route to host (113) rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6] 【异常问题解决】 关闭rsync服务端的防火墙服务（iptables） [root@backup mnt]# /etc/init.d/iptables stop iptables: Setting chains to policy ACCEPT: filter [ OK ] iptables: Flushing firewall rules: [ OK ] iptables: Unloading modules: [ OK ] [root@backup mnt]# /etc/init.d/iptables status iptables: Firewall is not running.2. rsync客户端执行rsync命令错误 【客户端的错误】 The remote path must start with a module name not a / 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::/backup ERROR: The remote path must start with a module name not a / rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6] 【异常问题解决】 rsync命令语法理解错误，::/backup是错误的语法，应该为::backup(rsync模块)3. rsync服务认证用户失败 【客户端的错误】 auth failed on module gurenyun 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: @ERROR: auth failed on module backup rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6] 【异常问题解决】 1. 密码真的输入错误，用户名真的错误 2. secrets file = /etc/rsync.password指定的密码文件和实际密码文件名称不一致 3. /etc/rsync.password文件权限不是600 4. rsync_backup:123456 密码配置文件后面注意不要有空格 5. rsync客户端密码文件中只输入密码信息即可，不要输入虚拟认证用户名称4. rsync服务位置模块错误 【客户端的错误】 Unknown module &apos;backup&apos; 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup @ERROR: Unknown module &apos;backup&apos; rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6] 【异常问题解决】 1. /etc/rsyncd.conf配置文件模块名称书写错误 5. rsync服务权限阻止问题 【客户端的错误】 Permission denied 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: sending incremental file list hosts rsync: mkstemp &quot;.hosts.5z3AOA&quot; (in backup) failed: Permission denied (13) sent 196 bytes received 27 bytes 63.71 bytes/sec total size is 349 speedup is 1.57 rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1039) [sender=3.0.6] 【异常问题解决】 1. 备份目录的属主和属组不正确，不是rsync 2. 备份目录的权限不正确，不是755 6. rsync服务备份目录异常 【客户端的错误】 chdir failed 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: @ERROR: chdir failed rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6] 【异常问题解决】 1. 备份存储目录没有建立 2. 建立的备份存储目录和配置文件定义不一致 说明：如果没有备份存储目录7. rsync服务无效用户信息 【客户端的错误】 invalid uid rsync 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: @ERROR: invalid uid rsync rsync error: error starting client-server protocol (code 5) at main.c(1503) [sender=3.0.6] 【异常问题解决】 rsync服务对应rsync虚拟用户不存在了 8. 客户端已经配置了密码文件，但免秘钥登录方式，依旧需要输入密码 【客户端的错误】 password file must not be other-accessible 【错误演示过程】 [root@nfs01 tmp]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password password file must not be other-accessible continuing without password file Password: sending incremental file list sent 26 bytes received 8 bytes 5.23 bytes/sec total size is 349 speedup is 10.26 【异常问题解决】 rsync客户端的秘钥文件也必须是600权限9. rsync客户端连接慢问题 【错误日志信息】 错误日志输出 2017/03/08 20:14:43 [3422] params.c:Parameter() - Ignoring badly formed line in configuration file: ignore errors 2017/03/08 20:14:43 [3422] name lookup failed for 172.16.1.31: Name or service not known 2017/03/08 20:14:43 [3422] connect from UNKNOWN (172.16.1.31) 2017/03/08 20:14:43 [3422] rsync to backup/ from rsync_backup@unknown (172.16.1.31) 2017/03/08 20:14:43 [3422] receiving file list 2017/03/08 20:14:43 [3422] sent 76 bytes received 83 bytes total size 349 正确日志输出 2017/03/08 20:16:45 [3443] params.c:Parameter() - Ignoring badly formed line in configuration file: ignore errors 2017/03/08 20:16:45 [3443] connect from nfs02 (172.16.1.31) 2017/03/08 20:16:45 [3443] rsync to backup/ from rsync_backup@nfs02 (172.16.1.31) 2017/03/08 20:16:45 [3443] receiving file list 2017/03/08 20:16:45 [3443] sent 76 bytes received 83 bytes total size 349 【异常问题解决】 查看日志进行分析，编写rsync服务端hosts解析文件10 rsync服务没有正确启动 【错误日志信息】 Connection refused (111) 【错误演示过程】 [root@gurenyun-muban ~]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup rsync: failed to connect to 172.16.1.41: Connection refused (111) rsync error: error in socket IO (code 10) at clientserver.c(124) [sender=3.0.6] 【异常问题解决】 [root@gurenyun-muban ~]# rsync --daemon [root@gurenyun-muban ~]# ss -lntup |grep rsync tcp LISTEN 0 5 :::873 :::* users:((&quot;rsync&quot;,1434,5)) tcp LISTEN 0 5 *:873 *:* users:((&quot;rsync&quot;,1434,4)) [root@gurenyun-muban ~]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup Password: sending incremental file list hosts sent 196 bytes received 27 bytes 49.56 bytes/sec total size is 349 speedup is 1.57 5.rsync命令参数说明12345678910111213141516171819202122232425262728293031-v, --verbose 详细模式输出，传输时的进度等信息 -z, --compress 传输时进行压缩以提高传输效率， --compress-level=NUM可按级别压缩。局域网可以不用压缩 -a, --archive 归档参数，表示以递归方式传输文件，并保持所有文件属性，等于-rtopgDl -r, --recursive 对子目录以递归模式，即目录下的所有目录都同样传输，注意是小写r -t, --times 保持文件时间信息不变（mtime） -o, --owner 保持文件属主信息-g, --group 保持文件属组信息 -p, --perms 保持文件权限 -P, --progress 显示同步的过程及传输时的进度等信息 -D, --devices 保持设备文件信息 b c s -l, --links 保留软链接（小写字母l） 没什么用-L, --copy-links 将链接文件源文件内容进行传输复制-e, --rsh=COMMAND 使用的信道协议（remote shell），指定替代rsh的shell程序。--exclude=PATTERN 指定排除不需要传输的文件信息(和tar参数一样)。？？？ --exclude-from=file 文件名所在的目录文件，即可以实现排除多个文件(和tar参数一样)。？？？--bwlimit=RATE limit I/O bandwidth; KBytes per second limit socket I/O bandwidth限速功能 案例：某DBA做数据同步，带宽占满，导致用户无法访问网站 git --delete（慎用） 让目标目录SRC和源目录数据DST一致，即无差异同步数据。 我有什么，你就有什么 我没什么，你也不能有补充：如何保证备份的数据属主和属组信息不变 方法一：增加模块 不同用户向不同模块传输数据 方法二：修改配置文件uid信息 uid = root gid = root #fake super = yes 备份目录属主属组需要修改为 root权限 5.rsync守护进程企业应用1）守护进程多模块功能配置1234567891011开发人员 运维人员 数据库人员 创建多模块 --- 创建多模块对应目录并授权 --- 重启服务 [backup] comment = &quot;backup dir by gurenyun&quot; path = /backup [devdir] path = /devdir [dbdir] path = /dbdir 2）守护进程的排除功能实践环境准备： [root@nfs01 ~]# mkdir /gurenyun_dir/gurenyun{01..03} -p [root@nfs01 ~]# touch /gurenyun_dir/gurenyun{01..03}/{a..c}.txt [root@nfs01 ~]# tree /gurenyun_dir/ /gurenyun_dir/ ├── gurenyun01 │?? ├── a.txt │?? ├── b.txt │?? └── c.txt ├── gurenyun02 │?? ├── a.txt │?? ├── b.txt │?? └── c.txt └── gurenyun03 ├── a.txt ├── b.txt └── c.txt 需求： 1. 排除gurenyun01目录不要传输备份，排除gurenyun03目录中a.txt文件不要传输备份 实现需求：--exclude=PATTERN [root@nfs01 ~]# rsync -avz /gurenyun_dir/ --exclude=gurenyun01 --exclude=gurenyun03/a.txt rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password sending incremental file list ./ gurenyun02/ gurenyun02/a.txt gurenyun02/b.txt gurenyun02/c.txt gurenyun03/ gurenyun03/b.txt gurenyun03/c.txt sent 381 bytes received 134 bytes 1,030.00 bytes/sec total size is 0 speedup is 0.00 总结：排除的路径信息，需要编写为指定目录的相对路径 常见错误： 1. 排除参数后面数据信息，不能写绝对路径 2. 排除参数后面数据信息，不能写相对路径 02. 排除的数据量比较大，有多个目录，多个文件都要排除 vim exlude.txt gurenyun01 gurenyun03/a.txt [root@nfs01 gurenyun_dir]# rsync -avz /gurenyun_dir/ --exclude-from=/gurenyun_dir/exclude.txt rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password sending incremental file list ./ exclude.txt gurenyun02/ gurenyun02/a.txt gurenyun02/b.txt gurenyun02/c.txt gurenyun03/ gurenyun03/b.txt gurenyun03/c.txt sent 482 bytes received 157 bytes 1,278.00 bytes/sec total size is 24 speedup is 0.043) 守护进程来创建备份目录（全网备份项目）1234567891011121314151617[root@nfs01 gurenyun_dir]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup/gurenyun/ --password-file=/etc/rsync.password sending incremental file list created directory gurenyun hosts sent 146 bytes received 72 bytes 436.00 bytes/sec total size is 158 speedup is 0.72 [root@nfs01 gurenyun_dir]# rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup/gurenyun/gurenyun01/gurenyun02/gurenyun03/ --password-file=/etc/rsync.password sending incremental file list rsync: mkdir &quot;gurenyun/gurenyun01/gurenyun02/gurenyun03&quot; (in backup) failed: No such file or directory (2) rsync error: error in file IO (code 11) at main.c(657) [Receiver=3.1.2]问题：不能创建多级目录nfs 数据备份 backup/172.16.1.31/ web 数据备份 backup/172.16.1.7/ db 数据备份 backup/172.16.1.51/ 4) 守护进程的访问控制配置123456789hosts allow = 172.16.1.0/24 hosts deny = 172.17.1.0/24建议：尽量只使用一种名单补充：rsyncd.conf文件中全局配置和局部配置全局配置：模块以上的配置信息 影响全部模块局部配置：模块以下的配置信息 只影响当前模块 总结：局部配置优先于全局配置 5）守护进程无差异同步配置123456目录之间实现无差异同步rsync -avz /null/ --delete rsync_backup@172.16.1.41::backup PS: 可以快速清空目录中的数据文件之间实现无差异同步（没什么用）rsync -avz /gurenyun/hosts01 --delete rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 6）守护进程的列表功能配置12 list = true在客户端，显示服务端的所有模块信息 ### 6.备份服务优缺点1234567891011优势： 1）可以实现增量备份 2）具有守护进程模式（服务端） 认证管理控制 实现白名单黑名单安全访问控制 密码文件信息，可以实现免交互传输数据 网络连接数量进行限制 3）实现数据的加密传输 -e 缺点： 1）比较擅长传输大文件，传输大量小文件，出问题 （打包） 2）传输大文件，有可能会传输中断 --partial 服务配置文件被移动到其他路径，如何启动服务​ rsync –daemon –config=/tmp/rsyncd.conf 四、综合架构存储服务器1.存储服务器概念介绍​ NFS是Network File System的缩写,中文意思是网络共享文件系统，​ 它的主要功能是通过网络（一般是局域网）让不同的主机系统之间可以共享文件或目录​ 企业环境：实现数据共享存储 FTP服务器（windows–server-U） 部署安装麻烦 / 权限设置 samba软件 部署安装麻烦 windows linux系统都支持 分布式存储 Moosefs（mfs）、GlusterFS、FastDFS 2.NFS存储服务器架构中作用​ 1.实现数据共享同一存储，保证数据一致性 ​ 2.降低公司架构服务器成本 3.NFS服务安装部署 ps: RPC: 远程过程调用程序（开发网络编程） 中介服务 服务端部署： 第一步 软件安装 yum install -y nfs-utils rpcbind 第二步 编写配置文件 vim /etc/exports 第三步 创建存储目录 mkdir /data 第四步 对目录授权 chown -R www. /data/ 第五步 启动程序服务 systemctl start rpcbind systemctl start nfs 第六步 进行检查验证 rpcinfo -p 172.16.1.31/10.0.0.31/localhost — 检查nfs服务信息是否注册 第六步 进行检查验证 showmount -e 172.16.1.31/10.0.0.31/localhost — 检查是否有共享存储目录信息 客户端部署： 第一步 软件安装 yum install -y nfs-utils 第二步 挂载存储目录 mount -t nfs 172.16.1.31:/data /mnt 第三步 检查挂载 df -h 第四步 检查验证 showmount -e 172.16.1.31/10.0.0.31/localhost — 检查是否有共享存储目录信息 4. nfs配置文件参数说明vim /etc/exports 1234567891011121314存储目录信息 主机地址或网段信息 权限/data 172.16.1.0/24 (rw,sync) rw --- 设置共享目录权限为可读可写ro --- 设置共享目录权限为只读 企业应用：开发人员想查看线上服务器数据 线下服务器权限 线下环境 线上环境不一致 sync --- 同步存储数据 数据传输到服务器--磁盘 保证数据安全性 存储服务器async --- 异步存储数据 数据传输到服务器--内存 保证数据传输效率 root_squash --- root用户传输数据需要做映射转换 nfsnobody OKno_root_squash --- root用户传输数据不需要做映射转换 root OKall_squash --- 普通用户传输数据需要做映射转换 nfsnobody OKno_all_squash --- 普通用户传输数据不需要做映射转换 原来是什么用户，存储好的数据就是什么用户管理 OKanonuid=1001,anongid=1001 ---指定映射的uid gid 5.企业中：如何进行配置12345678910111213141516171819 1. root是否应该做映射 no_root_squash：存储数据可以被客户端root用户随意改动 root_squash： 原有的其他用户文件不能查看，可以编辑 （推荐）2. 其他用户是否应该做映射： no_all_squash： 目录属主修改好，有效提高存储目录安全 （推荐） all_squash： 安全性较低 企业存储服务器部署方案：服务端第一个历程：编写配置文件vim /etc/exports /data 172.16.1.0/24(rw,sync,root_squash,no_all_squash) 第二个历程：修改好目录权限 chown -R www. /data/第三个历程：重启服务systemctl restart nfs 客户端：第一个历程：进行挂载mount -t nfs 172.16.1.31:/data /mnt 6.NFS服务程序常见的问题总结1234567891011121314151617181920212223242526272829303132333435363738391）服务权限不正确： 原因1：配置文件中权限参数书写不正确 原因2：目录本身权限不正确 755 nfsnobody 原因3：目录的权限具有继承关系 PS：尽量存储服务配置文件中不要出现父子关系 原因4：客户端挂载参数权限指定不正确 2）错误信息：‘/data/w’: Stale file handle 文件句柄错误：存储服务端有共享目录取消了，客户端并没进行卸载 什么是卸载完整：cat /proc/mounts文件没有相关挂载信息了 解决：将所有挂载信息，进行卸载重新挂载 3）存储服务无法进行启动： 当服务没有启动的时候，无法使用reload进行启动 4）clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host) 原因：防火墙服务没有关闭 客户端 --- 访问 --- 服务端 111 5）RPC: Program not registered 原因：rpcbind服务和nfs服务启动顺序不正确，nfs服务没有启动 解决：两个服务全关闭，再按照顺序启动 6）无法卸载挂载目录：/data/w: device is busy 第一种方式：离开挂载目录进行卸载 第二种方式：强制卸载 umount -lf 挂载点目录 -l lazy(懒惰) -f force（强制） 7）nfs实现restart重启==放大招（大招冷却时间cd） 在系统配置中/etc/sysconfig/nfs中指定了无敌时间的配置参数 NFSD_V4_GRACE=90 NFSD_V4_LEASE=90 NLM_GRACE_PERI0D=90 补充：运维异常问题三种大招 被人攻击了 负载过高 1. 服务重启 2. 操作系统重启 3. 服务或系统重装 7.存储服务重要文件/命令总结1234567891011/etc/exports 存储服务端配置文件 /usr/sbin/exportfs 负责平滑重启nfs服务 实践操作： [root@nfs01 r]# exportfs -rv exporting 172.16.1.0/24:/data/w exporting 172.16.2.0/24:/data/r 可以临时配置共享存储目录信息 exportfs -o rw,sync 172.16.1.0/24:/data /usr/sbin/showmount 检查可用存储共享目录信息 /var/lib/nfs/etab nfs服务端默认配置信息记录文件（日志文件） /proc/mounts 显示客户端挂载信息文件（默认挂载参数） 8.客户端如何实现自动挂载12345678910111213141516171819202122方法一：/etc/fstab ---小问题？？？ 编写fstab文件 172.16.1.31:/data/w /data/w nfs defaults 0 0 remote-fs.target 必须启动，才能加载fstab文件内容 centos6: 系统启动流程 --- 串行启动 1. /etc/fstab 网络配置 2. network 3. netfs服务 服务启动之后，重新加载fstab文件 centos7: 系统启动流程 --- 并行启动 1. /etc/fstab 2. network remote-fs 3. 系统启动完毕：重新加载fstab 方法二：/etc/rc.local --- 文件权限是可执行权限 客户端挂载权限参数信息： mount -o xx xx 客户端（开机自动挂载） --- 开机尝试挂载 --- nfs服务端 9.客户端挂载参数说明：123456789101112131415161718192021222324fg/bg： fg：程序在前台运行 mount -t nfs xxx bg：程序在后台运行 mount -t nfs -o bg soft: 出现nfs服务端停止，只尝试挂载一段时间，一段时间过后停止挂载（腼腆的男孩） hard: 出现nfs服务端停止，一直尝试挂载，根本停步下来（臭不要脸男孩） rw/ro： 指定挂载点目录权限 suid/nosuid：特殊权限 setuid=suid 安全性 权限位：像文件所有者执行操作动作一样 suid： 挂载点目录中suid功能是可以起作用 nosuid：挂载点目录文件suid权限是没用的 exec/noexec：存储目录中的文件是否可以直接执行 exec：可以让存储目录可执行文件直接运行 安全性 auto/noauto：fstab文件进行指定挂载参数 mount -a 快速加载fstab文件中配置信息 remount： 重新挂载 企业案例：文件系统异常： 阵列 分区 格式化（创建文件系统 ext3 ext4 xfs） 挂载 什么是文件系统：数据进行存储方式（机制） fat32（单个文件不能大于4G） ntfs（不管数据多大都可以直接存储） 系统全部数据出现只读情况 mount -o remount rw / 架构中耦合度：（架构师） 架构中一台服务器出现问题，影响其他服务器运行 -- 紧耦合 架构中一台服务器出现问题，不会影响其它服务 -- 松耦合 （分布式存储） 五、综合架构远程连接（SSH）1.远程连接服务概念介绍 SSH: 系统默认配置 22 默认可以使用root用户进行登录 数据信息进行加密 TELNET：网络设备默认开启 23 默认只能使用普通用户进行登录 数据信息显示明文 2.远程连接服务连接原理123456789101112131415openssh 远程连接数据包进行加密处理 openssl 网站访问请求信息和响应信息进行加密（HTTPS） 原理总结：01. 客户端 - 服务端 请求建立ssh远程连接 02. 服务端 - 客户端 请求确认公钥信息03. 客户端 - 服务端 确认接收公钥信息，保存到~/.ssh/know_hosts文件中 04. 服务端 - 客户端 询问用户密码信息05. 客户端 - 服务端 用户密码信息06. 服务端 - 客户端 确认密码信息正确 远程连接建立01 之后：不用反复确认公钥信息06 之后：所有传输的数据信息会进行加密处理总结：作用01：利用公钥和私钥对数据信息进行加密处理作用02：对用户身份信息进行认证 配图： ![057f503fbe2bad1c119b201b489f5](C:\Users\ADMINI~1\AppData\Local\Temp\WeChat Files\e5057f503fbe2bad1c119b201b489f5.png) 3.远程连接通讯建立方式基于口令方式（基于密码方式） 基于密钥方式 4.基于密钥方式实现远程连接步骤：管理端服务器1.创建密钥对信息ssh-keygen -t dsa 检查：ll ~/.ssh/id* 123456789101112131415161718192021222324[root@web01 ~]# ssh-keygen -t dsa Generating public/private dsa key pair. Enter file in which to save the key (/root/.ssh/id_dsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_dsa. Your public key has been saved in /root/.ssh/id_dsa.pub. The key fingerprint is: SHA256:v4ECG80UO1dv2WHn3jDkOrT/8luPwDks6NnGh4L8il8 root@web01 The key&apos;s randomart image is: +---[DSA 1024]----+ | . . + .| | o . . * + | | + . = = .| | + o o o +.| | o o S + o| | + + o + | | ....E.+.* . .| | .o+.o++.o.oo| | ..oo+oo. .+=| +----[SHA256]-----+ [root@web01 ~]# ll ~/.ssh/id* -rw------- 1 root root 668 Jun 19 00:00 /root/.ssh/id_dsa -rw-r--r-- 1 root root 600 Jun 19 00:00 /root/.ssh/id_dsa.pub 2.分发公钥ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.31 1234567891011121314[root@web01 ~]# ssh-copy-id -i /root/.ssh/id_dsa.pub root@172.16.1.31 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_dsa.pub&quot; The authenticity of host &apos;172.16.1.31 (172.16.1.31)&apos; can&apos;t be established. ECDSA key fingerprint is SHA256:E/rcVrdk84L/HagYfRXIz1QC1pERVXeaQiu8dfyF0qY. ECDSA key fingerprint is MD5:3c:a2:1e:8f:33:48:56:1d:14:aa:5c:6e:31:a9:de:8c. Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys root@172.16.1.31&apos;s password: Number of key(s) added: 1 Now try logging into the machine, with: &quot;ssh &apos;root@172.16.1.31&apos;&quot; and check to make sure that only the key(s) you wanted were added 3.检查确认ssh 172.16.1.31 1234567[root@web01 .ssh]# ssh 172.16.1.31 Last login: Tue Jun 18 23:37:04 2019 from 10.0.0.1 [root@nfs01 ~]# exit logout Connection to 172.16.1.31 closed. [root@web01 .ssh]# ssh 172.16.1.31 hostname nfs01 被管理端服务器1.检查确认1234567[root@nfs01 ssh]# cd /root/.ssh/ [root@nfs01 .ssh]# ll total 8 -rw------- 1 root root 600 Jun 19 00:04 authorized_keys -rw-r--r-- 1 root root 346 Jun 18 02:31 known_hosts [root@nfs01 .ssh]# cat authorized_keys ssh-dss AAAAB3NzaC1kc3MAAACBALkIMlfU30rSp6A9F0+LMg5cPRbDoPlCTm82FuOVXMKieeqniuOMgRSsRlUIwuEIe1e3fwTGmwoKdYGa4RaV8S3ZFm+dc1rEFOIOgC2GLRjLRf14Hmp9ZMOQVpE6AWycs2ziImhxYznawjMm4YgYUGpkeobhM++6ri3MRd+J6wpXAAAAFQD3mmoOxftbuAShzVMzeD/y4T36SQAAAIBfgM8KWsy2+sJRsqKeGmjiXr7OXLTtPaeWjEhJc/Q06HyWuV/K0Phr+c8KHGL1ClgPr0/uUpmoelVy9/ng53olqNy2Vyb6QMyIfenBj6OlQ96WBKNOregKCMgbpOquYgXhCVWMELv7b8PTOV6Rrx1vD0hQI/V9hFTLIYxE95eoqwAAAIA4gYv/P2yJKa156sTPyk+F/e7oMgM5rcpGuLSRk4DV779GE7NFU33A9Xia6EbxDL1fzfkRq3YP83lpmrFYbg8UkEwZpLIPlmshIrvQsuVFnV9nt8JE+uQR75KhT0jTGZZv2mZ+g7NIWDEa1QFsbo+9Nauj8yADiLzXmXrDXCC2nw== root@web01 2.解决免交互问题：01. 第一次连接有yes/no ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.7 -o StrictHostKeyChecking=no 1. 需要有密码信息确认 yum install -y sshpass sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.7 -o StrictHostKeyChecking=no ssh-copy-id分发公钥原理： 01. 进行ssh远程连接 02. scp将公钥进行传输 03. 被管理端将公钥保存到用户家目录中的.ssh目录中 04. 修改公钥文件名称和权限 authorized_keys 600分发脚本： 123456789101112131415vim /server/scripts/fenfa_key.sh#!/bin/bashfor ip in &#123;7,31,41&#125;do echo &quot;===============start fenfa_Key to 172.16.1.$ip=========================&quot; sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.$ip -o StrictHostKeyChecking=no &amp;&gt;/dev/null if [ $? -eq 0 ] then echo &quot;===============pub_key fenfa ok with 172.16.1.$ip=========================&quot; echo &quot;&quot; else echo &quot;===============pub_key fenfa failed with 172.16.1.$ip=========================&quot; echo &quot;&quot; fi done 检查脚本： 123456789101112[root@m01 scripts]# vim fenfa_check.sh #!/bin/bashif [ $# -ne 1 ]then echo &quot;Usage: $0 请在脚本后面输入一个命令信息&quot; exit 100fifor ip in &#123;7,31,41&#125;do echo &quot;===============start fenfa_Key to 172.16.1.$ip=========================&quot; ssh 172.16.1.$ip $1done 补充： 1234567if判断比较信息： = -eq equal &gt; -gt greater than &lt; -lt less than &gt;= -ge greater equal &lt;= -le less equal &lt;&gt; -ne no equal 分发公钥问题说明： 01. 密码信息不正确 02. 免密码分发公钥 yum install -y sshpass 03. 分发公钥信息，需要分发你有的公钥 是否有公钥 m01--/root/.ssh/id_xsa.pub 排错方法： 01. 测试脚本 ssh 172.16.1.7 hostname 02. 脚本中命令手动执行 sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.$ip -o StrictHostKeyChecking=no3. 远程服务端口号发生变化了，如何修改脚本命令​ centos7：掌握​ sshpass -p123456 ssh-copy-id -i /root/.ssh/id_rsa.pub 172.16.1.7 -o StrictHostKeyChecking=no -p 52113​ centos6：分发公钥​ sshpass -p123456 ssh-copy-id -i /root/.ssh/id_dsa.pub “10.0.0.7 -o StrictHostKeyChecking=no -p 52113” 4. SSH服务端配置文件说明：123456789vim /etc/ssh/sshd_config #Port 22 --- 指定服务端口号信息 #ListenAddress 0.0.0.0 --- 指定相应网卡可以接收远程访问请求 web 默认：主机上所有网卡都可以接收远程连接请求 监听地址信息，一定是本地网卡上有的地址信息 ****** #PermitEmptyPasswords no --- 是否允许空密码登录 #PermitRootLogin yes --- 不允许root用户登录115 #UseDNS yes --- 是否进行DNS反向解析 no 172.16.1.31 --&gt; 172.16.1.61 79 GSSAPIAuthentication yes --- 是否开启GSSAPI no 5.SSH防范远程入侵方案https://blog.51cto.com/phenixikki/1546669 1. 用密钥登录，不用密码登陆 2. 防火墙封闭SSH,指定源IP限制(局域网、信任公网) ？？？ 3. 尽量不给服务器外网IP 4. 负载均衡主机，只监听内网地址的远程访问 5. 最小化（软件安装-授权） web nfs rsync mysql zabbix … 端口（门） yum install -y nmap — 扫描网站端口信息 nmap -p 1-65535 www.baidu.com 80 443 6. 给系统的重要文件或命令做一个指纹 md5sum -c /etc/passwd abcd — zabbix 7. chattr +i 锁住文件 5.远程服务相关命令12345678910111213141516171819202122232425a） ssh ssh [参数] [user@]主机信息 参数：-p 指定端口信息 -o 指定特殊参数功能 [user@]: 以什么用户身份远程连接到主机上（默认当前用户） 主机信息：IP地址 或者 主机名称（本地hosts文件需要解析） b） scp 远程传输数据（全量） 推：scp [参数] src [user@]主机信息:/dest 拉: scp [参数] [user@]主机信息:/src /dest 参数：-r 递归复制数据信息（目录） -p 保持文件数据属性信息不变 c） sftp 远程文件数据传输 sftp [参数] [user@]主机信息 -P port 如何下载数据： cd /backup --- 切换到远程ftp服务端指定目录 get gurenyun61.txt --- 默认下载数据，会下载到进入ftp模式之前的目录中 mget xx xx --- 批量下载多个文件 lcd /gurenyun --- 所有命令前面加上l 表示操作本地主机数据信息 如何上传数据： put gurenyun.txt mput --- 批量上传多个文件 六、ansible批量管理服务 1.服务概述1234567891011ansible批量功能 -- 并行 01. 可以实现批量系统操作配置 02. 可以实现批量软件服务部署 03. 可以实现批量文件数据分发 04. 可以实现批量系统信息收集 ansible批量管理服务意义 01. 提高工作的效率（部署综合架构） 02. 提高工作准确度 03. 减少维护的成本 04. 减少重复性工作 2.ansible软件学习方法 官方资料：docs.ansible.com 通过帮助命令：ansible-doc -l --- 查看模块的作用说明 ansible-doc -s yum --- 查看指定模块参数说明 ansible-doc yum --- 显示模块详细说明 总结学习过的模块 3.ansible软件安装部署123456789altstack自动化批量管理软件 （复杂（安装 配置 应用）） 软件服务比较重 特点： 1. 没有配置文件（不需要配置） 2. 不需要启动服务 3. 客户端没有需要部署任务 管理服务器： 第一个历程：安装ansible软件 yum install -y ansible -- epel 测试ansible连接失败，排错思路： 利用SSH远程连接测试 （重新分发公钥） SSH测试成功，ansible测试失败在被管理主机上，杀死ssh特殊进程sshd: root@notty 4.ansible软件配置应用ansible软件功能组成模块： 1）主机清单功能模块： /etc/ansible/ hosts ​ 2）剧本功能模块 ​ 3）核心或自定义模块 ​ 4）插件功能（python） 5.主机清单如何配置：123456第一种配置方法：指定主机组配置 [gurenyun] 172.16.1.41 172.16.1.31 [oldgirl] 172.16.1.7 1234第二种配置方法：支持主机名符号匹配配置 [gurenyun] 172.16.1.[1:50] web[01:03] 12345第三种配置方法：支持内置变量信息配置[gurenyun]172.16.1.7 ansible_ssh_user=root ansible_ssh_pass=123456 ansible_ssh_port=22[gurenyun]172.16.1.7 ansible_user=root ansible_password=123456 ansible_port=22 1234567第四种配置方法：支持特殊变量信息配置 （剧本） [gurenyun] 172.16.1.7 [gurenyun:vars] ansible_user=root ansible_password=123456 ansible_port=22 1234567891011第五种配置方法：嵌入式配置方法[backup:children]backupclientbackupserver[backupclient] 172.16.1.7 ansible_user=root ansible_password=123456 172.16.1.31 [backupserver] 172.16.1.41 官方资料参考：https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html 6.批量管理模块使用方法补充：ansible输出信息有颜色显示：12345绿色： 操作执行成功，没有对远程主机做任何改动黄色： 操作执行成功，对远程主机数据信息有改动红色： 操作执行失败粉色： 操作警告信息（忠告）蓝色： 显示命令操作执行的过程 模块作用：完成不同的批量管理功能 ping（测试）： 12345678显示ansible所有模块数量：[root@m01 ansible]# ansible-doc -l|wc -l 283410几个模块掌握ansible命令语法：ansible 主机信息（IP 主机组 all） -m （模块名）command -a &quot;操作动作&quot; 01 02 03 04 05 06 第一个模块：命令模块 - command（默认）作用：在目标主机执行命令： 参数： chdir： 在执行命令前，先切换目录信息 creates： 判断一个文件是否存在，如果存在，后面命令被跳过（不执行） removes： 判断一个文件是否存在，如果存在，后面命令就执行 free_form：在使用command模块时候必须输入一个合法的linux命令 ps： ansible backup -m command -a “hostname” 特殊用法：chdir 参数ansible backup -m command -a “chdir=/tmp pwd” ps：在执行命令前，先切换目录信息 特殊用法：creates 参数ansible backup -m command -a “creates=/etc/gurenyun.txt touch /opt/gurenyun.txt” ps： 判断一个文件是否存在，如果存在，后面命令被跳过（不执行） 特殊用法：removes 参数ansible backup -m command -a “removes=/etc/gurenyun.txt touch /opt/gurenyun.txt” ps:判断一个文件是否存在，如果存在，后面命令就执行 第二个模块：命令模块 - shell（万能模块）后面跟linux命令 第三个模块：命令模块 - script （执行脚本）、1234567891011shell 模块执行脚本 第一个历程：编写脚本 [root@m01 scripts]# cat yum.sh #!/bin/bash yum install -y iftop 第二个历程：批量分发脚本文件 ansible backup -m copy -a &quot;src=/server/scripts/yum.sh dest=/server/scripts/&quot; 第三个历程：修改脚本权限 ansible backup -m shell -a &quot;chmod a+x /server/scripts/yum.sh&quot; 第四个历程：运行脚本 ansible backup -m shell -a &quot;rpm -qa iftop vs： 1234567script 模块执行脚本 第一个历程：编写脚本 [root@m01 scripts]# cat yum.sh #!/bin/bash yum install -y iftop 第二个历程：运行脚本 ansible backup -m script -a &quot;/server/scripts/yum.sh&quot; 所以： shell模块虽然是万能模块，但最好选择专业的模块完成专业事情 第四个模块：文件模块 - copy （批量分发文件—推）​ 作用： 1. 分发文件数据信息 从管理端 -- 被管理端 2. 修改文件权限属性信息 3. 移动远程主机数据信息 被管理端 -- /tmp/gurenyun.txt --- /opt/ 参数： src： 指定要推送的数据信息 dest：指定数据保存在远程主机什么目录中 mode：修改文件权限信息 owner：修改文件属主信息 group：修改文件属组信息 backup: 分发文件数据时，会对源文件进行备份 remote_src: 复制远程主机文件到其他路径，或者进行远程主机数据备份 content: 直接编辑文件内容 特殊用法：传输文件时，修改文件权限ansible backup -m copy -a “src=/etc/hosts dest=/etc/hosts.bak mode=600 owner=root group=root” 特殊用法：分发文件时，对源文件进行备份ansible backup -m copy -a “src=/etc/hosts dest=/etc/ backup=yes” 特殊用法：远程主机文件进行复制备份（便于批量还原）ps:远程主机的文件进行备份 ansible backup -m copy -a “src=/etc/hosts dest=/etc/hosts.backup remote_src=yes” 批量还原： ansible backup -m copy -a “src=/etc/hosts.backup dest=/etc/hosts remote_src=yes” 第五个模块：文件模块 - fetch （批量拉取文件—拉） 扩展ansible 172.16.1.31 -m fetch -a “src=/etc/oldgirl.txt dest=/tmp” 第六个模块：文件模型 - file （修改文件权限 ）作用： 1. 修改文件权限信息 2. 创建数据信息/删除数据信息 用法：修改文件权限ansible 172.16.1.31 -m file -a “path=/etc/oldgirl.txt mode=666 owner=www group=www” 特殊用法：创建文件 touchansible 172.16.1.7 -m file -a “path=/gurenyun/gurenyun.txt state=touch” 特殊用法：创建目录 directoryansible 172.16.1.7 -m file -a “path=/gurenyun/gurenyun_dir state=directory” 特殊用法：创建硬链接 hardansible 172.16.1.7 -m file -a “src=/gurenyun/gurenyun.txt path=/gurenyun/gurenyun_dir/gurenyun_hard_link state=hard” 特殊用法：创建软链接 inkansible 172.16.1.7 -m file -a “src=/gurenyun/gurenyun.txt path=/gurenyun/gurenyun_dir/gurenyun_soft_link state=link” 特殊用法：删除文件数据 absentansible 172.16.1.7 -m file -a “path=/gurenyun/gurenyun_dir/gurenyun_soft_link state=absent” 第七个模块： cron 定时任务模块 cron定时模块作用：批量添加设置定时任务信息 cron定时模块格式： ​ * * * * * 定时任务 &amp;&gt;/dev/null ​ 分 时 日 月 周 minute hour day month weekday job=’任务信息’&amp;&gt;/dev/null’ ​ 3.参数：​ minute hour day month weekday — 时间参数​ job – 指定定时任务信息​ name – 添加注释信息​ state – absent 删除定时任务 present 添加定时任务​ disabled – 注释定时任务 yes 取消定时任务注释 no 批量编写定时任务： 每隔5分钟，时间同步 ansible backup -m cron -a “name=’date ntpdate crond02’ minute=*/5 job=’ntpdate ntp1.aliyun.com &amp;&gt;/dev/null’” 批量删除定时任务信息： ansible backup -m cron -a “name=’date ntpdate crond’ state=absent” 批量注释定时任务信息： ansible backup -m cron -a “name=’date ntpdate crond’ minute=*/5 job=’ntpdate ntp1.aliyun.com &amp;&gt;/dev/null’ disabled=yes” 第八个模块：yum 批量下载安装软件作用：安装部署软件参数： name： 指定软件名称 state： 指定动作信息 installed yum批量安装： ansible backup -m yum -a “name=nmap state=installed” 第九个模块：service 管理服务状态模块作用：批量启动/停止服务程序 设置服务是否开机自动启动参数： name： 定义服务名称 state： 是否启动 started 停止 stopped 重启 restarted 平滑重启 reloaded enabled：设置服务是否开机自动启动 设置服务启动/停止： ansible backup -m service -a “name=firewalld state=started enabled=yes” ansible backup -m service -a “name=firewalld state=stopped enabled=no” 第九个模块：user 用户管理模块作用 创建用户信息参数 name 创建的用户名称 uid 指定用户的uid信息 group 指定属于主要组 groups 指定属于哪个附属组 password 设置用户密码信息？？？ shell 指定登录方式 /bin/bash /sbin/nologin create_home：创建虚拟用户： 创建虚拟用户： ansible backup -m user -a “name=gedage. uid=666 group=root groups=gurenyun shell=/sbin/nologin create_home=no” 设置用户密码： PS：密码信息必须是加密的 第一步先生成加密密码。 第二步复制加密密码 放入命令中。 方法一: 1234ansible all -i localhost, -m debug -a &quot;msg=&#123;&#123; &apos;mypassword&apos; | password_hash(&apos;sha512&apos;, &apos;mysecretsalt&apos;) &#125;&#125;&quot; mypassword --- 明文密码信息 sha512 --- 明文转换为密文加密方法 mysecretsalt --- 用什么做算法依据生成密文信息 实例： 1ansible all -i localhost, -m debug -a &quot;msg=&#123;&#123; &apos;gurenyun123&apos; | password_hash(&apos;sha512&apos;, &apos;oldgirl&apos;) &#125;&#125;&quot; ​ 复制加密密码 放入命令行 password= 后生成用户加密密码。 ansible backup -m user -a ‘name=Alex02 password=”$6$oldgirl$kAUTXVC2z1agr1HlmpFe9abFhWKwJ1fNyg64F95U3rVumwQfqOuhV3YkyZU9.H79TChzIKn5epl5M18B199qV1”‘ ps：注意加密密码必须加双引号。 可以再 /etc/shadow 中查看加密密码。 方法二： 在centos7中无法使用mkpasswd –method=sha-512 方法三: 利用python模块功能 yum install python-pip pip install passlib python -c “from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))” 复制加密密码 放入命令行 password= 后生成用户加密密码。 ansible backup -m user -a ‘name=Alex02 password=”$6$oldgirl$kAUTXVC2z1agr1HlmpFe9abFhWKwJ1fNyg64F95U3rVumwQfqOuhV3YkyZU9.H79TChzIKn5epl5M18B199qV1”‘ 补充：pip优化 第十个模块：mount 挂载模块作用：实现批量挂载操作参数： src ：需要挂载存储设备信息 path : 挂载点路径信息 fstype ：挂载类型信息 state ：挂载操作（mounted present）/卸载操作（unmounted absent） mounted： 可以实现立即挂载 永久开机自动挂载 present： 永久开机自动挂载 unmounted： 可以实现立即卸载 absent： 可以实现立即卸载 永久卸载 批量挂载操作： ansible 172.16.1.7 -m mount -a “src=172.16.1.31:/data path=/mnt fstype=nfs state=mounted” 六、利用剧本功能完成服务程序一键化部署1.编写脚本：​ 实操：一键化部署rsync服务：ansible命令 1234567891011121314151617181920rsync服务部署流程：服务端部署：01. 安装软件程序 ansible 172.16.1.41 -m yum -a &quot;name=rsync state=installed&quot;02. 编写配置文件 ansible 172.16.1.41 -m copy -a &quot;src=/etc/rsyncd.conf dest=/etc/&quot;03. 创建虚拟用户 ansible 172.16.1.41 -m user -a &quot;name=rsync shell=/sbin/nologin create_home=no&quot;04. 创建密码文件，并修改权限 ansible 172.16.1.41 -m copy -a &quot;content=&apos;rsync_backup:gurenyun123&apos; dest=/etc/rsync.password mode=600&quot;05. 创建备份目录，并修改权限 ansible 172.16.1.41 -m file -a &quot;path=/backup state=directory owner=rsync group=rsync&quot;06. 启动程序服务 ansible 172.16.1.41 -m service -a &quot;name=rsyncd state=restarted enabled=yes&quot;客户端部署：01. 安装软件程序 ansible rsync_client -m yum -a &quot;name=rsync state=installed&quot;02. 创建密码文件，并修改权限 ansible rsync_client -m copy -a &quot;content=&apos;gurenyun123&apos; dest=/etc/rsync.password mode=600&quot; 2.编写剧本模块–命令 剧本–脚本：汇总多个模块的批量操作 剧本如何编写： python yaml 语法规范 三种规范原则：空格： 缩进信息 两个空格 PS：编写剧本时，将tab键扣掉冒号： key-value（键值关系） hosts: 172.16.1.41 冒号后面不需要有空格情况： 01. 以冒号结尾 02. 冒号信息出现在注释信息中短横线：- 生成列表信息 hosts: 172.16.1.41 hosts: 172.16.1.31 剧本内容编写：创建剧本存放目录：mkdir /etc/ansible/ansible_playbook编写剧本：vim /etc/ansible/ansible_playbook/test.yaml 剧本执行方法： 检查剧本语法信息 ansible-playbook –syntax-check test.yaml 出现playbook: test.yaml 即剧本测试没问题。 剧本模拟执行 ansible-playbook -C test.yaml 真实执行剧本 ansible-playbook test.yaml 常见问题： 如果安装了cowsay vim /etc/ansible/ansible.cfg nocows = 1 3.一键化剧本编写示例：rsync服务程序一键化剧本 第一个历程：修改主机清单 ex： [rsync_client] 172.16.1.7 172.16.1.31 第二个历程：创建所需分发文件 ex：/etc/ansible/ansible_playbook/rsyncd.conf 第三个历程：编写剧本文件 1234567891011121314151617181920vim rsync_auto.yaml - hosts: 172.16.1.41 tasks: - name: 01:install rsync software yum: name=rsync state=installed - name: 02:push client copy: src=./rsyncd.conf dest=/etc/ - name: 03:create user user: name=rsync shell=/sbin/nologin create_home=no - name: 04:create password file copy: content=&apos;rsync_backup:gurenyun123&apos; dest=/etc/rsync.password mode=600 - name: 05:create backup dir file: path=/backup state=directory owner=rsync group=rsync - name: 06:重启rsync服务 service: name=rsyncd state=restarted enabled=yes - hosts: rsync_client tasks: - name: 01:ceate password file copy: content=&apos;gurenyun123&apos; dest=/etc/rsync.password mode=600 第四个历程：测试剧本功能 附：nfs服务程序一键化剧本 1234567891011121314151617181920vim nfs_auto.yaml- hosts: 10.0.0.31 tasks: - name: 01:安装软件 yum: name=rpcbind name=nfs-utils state=installed - name: 02:配置文件 copy: content=&apos;/data 172.16.1.0/24(rw,sync,anonuid=1002,anongid=1002,no_all_squash,root_squash)&apos; dest=/etc/exports - name: 创建data目录 file: path=/data state=directory owner=www group=www - name: 04:重启rpc服务 service: name=rpcbind state=restarted enabled=yes - name: 05:重启nfs服务 service: name=nfs state=restarted enabled=yes- hosts: nfs_client tasks: - name: 01:安装软件 yum: name=rpcbind name=nfs-utils state=installed - name: 挂载 mount: src=172.16.1.31:/data path=/mnt fstype=nfs state=mounted 八、数据实时同步备份1.概念说明：​ 定时同步备份数据：缺点，备份的周期最短为1分钟 企业内部人员数据​ 实时同步备份数据：数据同步备份效率高 用户外部人员数据 2.同步原理：​ 01. 发现指定目录数据有变化 inotify​ 02. 将变化数据进行传输备份 rsync​ 03. 利用脚本实现实时同步 while循环（条件判断）-&gt; sersync 3.实时监控软件inotify1）监控软件安装部署 yum install -y inotify-tools -- epel源 2）软件命令应用 rpm -ql inotify-tools rpm -qc 服务 --- 查看服务程序配置文件保存路径 inotifywait --- 监控目录变化的数据信息 inotifywatch --- 监控变化事件次数 监控事件信息：增加信息 删除信息 修改信息 移动数据1)inotifywait参数说明：12345678--exclude &lt;pattern&gt; --- 排除指定数据信息，不做实时同步 --excludei &lt;pattern&gt; --- 排除指定数据信息（数据信息忽略大小写），不做实时同步 -m|--monitor --- 实时一直进行监控（默认只监控一次） -r|--recursive --- 递归监控目录 --format &lt;fmt&gt; --- 设置监控输出信息的格式 （了解） --timefmt &lt;fmt&gt; --- 时间格式设定 -e|--event --- 指定监控事件 （只监控目录中是否有新的数据创建） -q|--quiet --- 减少命令输出的信息 2)inotify事件信息：123456789101112131415161718192021222324access file or directory contents were read 文件数据内容被读取 modify file or directory contents were written 文件数据内容被写入 attrib file or directory attributes changed 文件数据属性被修改 close_write file or directory closed, after being opened in writeable mode 文件或目录被关闭，在文件被修改后 close_nowrite file or directory closed, after being opened in read-only mode 文件或目录被关闭，在文件没有被改动后 close file or directory closed, regardless of read/write mode 文件或目录被关闭，无论编写或者未修改 open file or directory opened 文件被打开 moved_to file or directory moved to watched directory 文件或目录移动到监控目录中 moved_from file or directory moved from watched directory 文件或目录从监控目录中移出 move file or directory moved to or from watched directory 文件或目录被移动了 create file or directory created within watched directory 文件或目录在指定监控目录中进行创建 delete file or directory deleted within watched directory 文件或目录在指定监控目录中进行删除 3) 实践操作演示：1234567891011121314151617[root@nfs01 data]# inotifywait -mrq --timefmt &apos;%d/%m/%y %H:%M&apos; --format &apos;%T %w%f 事件:%e&apos; /data 24/06/19 09:41 /data/gurenyun06.txt 事件:CREATE 24/06/19 09:41 /data/gurenyun06.txt 事件:OPEN 24/06/19 09:41 /data/gurenyun06.txt 事件:ATTRIB 24/06/19 09:41 /data/gurenyun06.txt 事件:CLOSE_WRITE,CLOSEsed命令替换修改内容24/06/19 09:44 /data/gurenyun01.txt 事件:OPEN 打开源文件信息 24/06/19 09:44 /data/sedLDr3BA 事件:CREATE 创建一个临时文件 24/06/19 09:44 /data/sedLDr3BA 事件:OPEN 将临时文件打开 24/06/19 09:44 /data/gurenyun01.txt 事件:ACCESS 访问源文件信息 24/06/19 09:44 /data/sedLDr3BA 事件:MODIFY 修改临时文件 24/06/19 09:44 /data/sedLDr3BA 事件:ATTRIB 修改临时文件属性 24/06/19 09:44 /data/gurenyun01.txt 事件:CLOSE_NOWRITE,CLOSE 源文件不做任何改动 24/06/19 09:44 /data/sedLDr3BA 事件:CLOSE_WRITE,CLOSE 临时文件修改完毕保存 24/06/19 09:44 /data/sedLDr3BA 事件:MOVED_FROM 临时文件进行重命名操作 24/06/19 09:44 /data/gurenyun01.txt 事件:MOVED_TO 4)脚本如何实现实时同步：12345678910#!/bin/bash inotifywait /data -mrq --format &apos;%w%f&apos; -e &quot;modify,close_write,move,create,delete&quot;|\ while read line do #将数据进行推送 rsync -avz --delete /data/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password done #将数据进行推送 rsync -avz --delete /data/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password done 5)停止脚本1234567891011脚本执行，有可能停不下来 crtl+z ---&gt; 暂停脚本 如何停止脚本进程 kill -9 强制停止脚本 kill 进程 --- 停止进程 killall 进程名 --- 停止进程，进程停止后会有提示 pkill 进程名 --- 停止进程，模糊的杀手（sh），进程停止后没有提示 fg -- 将进程放入前台 脚本放入后台运行：（脚本运行，远程关闭，脚本即停止）sh inotify.sh &amp; --- 将脚本放入后台运行 6） inotify服务优化说明在/proc/sys/fs/inotify/目录下有三个文件，对inotify机制有一定的限制 max_queued_events： 设置inotifywait或inotifywatch命令可以监视的文件数量（单进程） 327679 max_user_instances: 设置每个用户可以运行inotifywait或inotifywatch命令进程数 128 max_user_watches： 设置inotify实例事件(event)队列可容纳的事件数量 root —/data gurenyun01.txt — create事件 root —/data gurenyun02.txt — create事件 – 内存 gurenyun —/data gurenyun03.txt — delete事件 – 内存 50000000 4.实现实时同步：sersync软件1）sersync软件下载安装 — 二进制（解压后直接使用） 官方资料：https://github.com/wsgzao/sersync mkdir /server/tools unzip sersync_installdir_64bit.zip cd sersync_installdir_64bit/ mv sersync/ /usr/local/ 2）编写sersync服务配置文件 cd /usr/local/sersync/conf vim confxml.xml 说明：将参数改为true，表示显示sersync程序执行过程 说明：排除指定信息不需要进行同步 说明：指定监控事件信息 配置指向信息 3）sersync服务如何启动cd /usr/local/sersync/bin/ chmod a+x sersync /usr/local/sersync/bin/sersync -help （-help –help -h –h man sersync） 参数信息： -d（daemon） — 让服务以守护进程方式运行 -r — 递归复制同步数据 -o — 读取加载指定同步文件 -o 配置文件（confxml.xml） — watch “/data” — /usr/local/sersync/conf/confxml.xml -o 配置文件（confxml01.xml）— watch “/data01”— /usr/local/sersync/conf/confxml01.xml 启动命令 sersync -dro /usr/local/sersync/conf/confxml.xml5.配置lsync服务1.下载lsyncd yum -y install lsyncd 2.修改配置文件 vim /etc/lsyncd.conf 12345678910111213141516171819202122settings &#123; logfile = &quot;/var/log/lsyncd/lsyncd.log&quot;, statusFile = &quot;/var/log/lsyncd/lsyncd.status&quot;, inotifyMode = &quot;CloseWrite&quot;, maxProcesses = 8,&#125;sync &#123; default.rsync, source = &quot;/data&quot;, target = &quot;rsync_backup@172.16.1.41::backup&quot;, delete= true, exclude = &#123; &quot;.*&quot; &#125;, delay = 1,rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true, password_file = &quot;/etc/rsync.password&quot;, _extra = &#123;&quot;--bwlimit=200&quot;&#125;&#125;&#125; 3.启动服务 systemctl start lsyncd 九、综合架构网站服务原理1.用户访问网站的原理过程：12345678 00. 用户输入域名点击回车01. 完成域名DNS解析过程 DNS原理02. 完成TCP三次握手建立03. 向网站服务器访问请求信息（HTTP请求） 03.5. 网站架构接收用户请求 （负载均衡 web集群 存储 数据库 缓存...）04. 向客户端响应数据信息 （HTTP响应）05. 用户利用浏览器解析响应信息，显示最终页面06. 完成TCP四次挥手过程 2.用户访问网站HTTP协议原理12345678910111213141516171819202122232425262728293031323334什么是HTTP：超文本传输协议 HTTP协议请求：报文结构 4个部分 1）请求行： 标题 1行 请求方法：get（获取） post（提交） 请求内容：默认index.html(首页文件) 协议版本：HTTP1.0 HTTP1.1 HTTP2.0(高并发访问效率更高) TCP协议长连接和短连接概念： 短连接：一次连接 一次请求 长连接：一次连接 多次请求 2）请求头： 中心思想 多行 请求主机信息： 根据请求主机信息显示不同页面 www bbs blog 请求user-agent信息：打开手机---腾讯浏览器APP---设置---浏览器UA:iphone 3）空行 4）请求主体： 详细说明内容 多行 使用get方法：没有请求主体 使用post方法：产生请求主体（提交的信息 用户注册信息 用户登录信息） ？？？ HTTP协议响应：报文结构 4个部分 1）响应行： 响应状态码：响应结果 面试题 200 OK --- 正常结果信息 301 --- 跳转 永久跳转 302 --- 跳转 临时跳转 401 --- 认证失败了 403 --- 用户禁止访问 爬虫 iptables --- 网站首页文件不存在 404 --- 你访问的页面不存在 网站服务端会进行优雅显示 5xx --- 网站架构服务有关 2）响应头部： 响应的服务程序：web服务程序名称 nginx/tenginx/bfe/apache 3）空行 4）响应主体： 请求响应过来的代码信息：html代码信息 3.HTTP协议资源12345678910111213141516171819202122232425262728293031323334媒体资源类型：mime.types 媒体资源类型文件媒体资源类型文件中有的信息：会直接解析，显示页面媒体资源类型文件没有的信息：会进行下载，不会解析访问网站地址类型：www.gurenyun.com /gurenyun.jj url uri url: 全称为Uniform Resource Location，中文翻译为统一资源定位符，也被称为网页地址uri: 全称为Uniform Resource Identifier，中文翻译为统一资源标识符，是一个用于标识某一互联网资源名称的字符串 访问资源分类： 静态资源： 所见即所得 见到的代码是什么样，浏览器解析就会解析成什么页面 1) 访问资源uri扩展名信息 每个页面都有一个固定的URL地址，且URI一般以.html、.htm、.shtml等常见形式为后缀，而且地址中不含有问号“？”或“&amp;”等特殊符号。 2) 网页内容一经发布到网站服务器上，无论是否有用户访问，每个网页的内容都是保存在网站服务器文件系统上的，也就是说，静态网页是实实在在保存在服务器上的文件实体，每个网页都是一个独立的文件。 *3) 网页内容是固定不变的，因此，容易被搜索引擎收录（容易被用户找到）（优点）。 4) 因为网页没有数据库的支持，所以在网站制作和维护方面的工作量较大，当网站信息量很大时，完全依靠静态网页比较困难（缺点）。 5) 网页的交互性较差，在程序的功能实现方面有较大的限制（缺点）。 *6) 网页程序在用户浏览器端解析，如IE浏览器，程序解析效率很高，由于服务器端不进行解析，并且不需要读取数据库，因此服务器端可以接受更多的并发访问。当客户端向服务器请求数据时，服务器会直接从磁盘文件系统上返回数据（不做任何解析）。待客户端拿到数据后，在浏览器端解析并展现出来（优点）。 用户请求 --- web服务器 -- index.html gurenyun.html gurenyun.jpg --- 用户 动态资源： 会调取数据库资源，显示页面信息 1) 网页扩展名后缀常见为：.asp、.aspx、.php、.js、.do、.cgi等。 ※ *2) 网页一般以数据库技术为基础，大大降低了网站维护的工作量。 *3) 采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、投票、用户管理、订单处理、发博文等。 *4) 动态网页并不是独立存在于服务器上的网页文件，当用户请求服务器上的动态程序时，服务器解析这些程序并可能通过读取数据库来返回一个完整的网页内容。 5) 动态网页中的“？”在搜索引擎的收录方面存在一定的问题，搜索引擎一般不会从一个网站的数据库中访问全部网页，或者出于技术等方面的考虑，搜索蜘蛛一般不会去抓取网址中“？”后面的内容，因此在企业通过搜索引擎进行推广时，需要针对采用动态网页的网站做一定的技术处理（伪静态技术），以便适应搜索引擎的抓取要求。6) 动态资源需要和数据进行交互，网页面显示效率较低 用户请求 --- web服务器 --- gurenyun.php ---&gt; php服务处理 --&gt; 数据库 --- php --- web --- 用户 用户请求 --- web服务器 --- gurenyun.js ---&gt; tomcat服务处理 --&gt; 数据库 伪静态资源： 1）有数据库支持，可以进行交互 2）便于被搜索引擎收录 4.网站度量方式：面试题 IP：根据用户访问的源IP地址 awk数组 ELK—access.log(记录用户源IP地址（公网IP地址）) 参考数据值：192.168（南方 10万） 10.0.0（北方 1万） 彩票 PV: 页面访问量 参考数据值：用户点击网站页面的数量 UV：记录独立用户访客数量 cookie： 钥匙 会员卡 网站给用户分配身份标识信息，保存在主机本地 session：锁头 会员登记表 网站产生的用户访问记录信息，保存在网站服务器中 程序代码进行统计 度量数值参考：http://alexa.chinaz.com/alexa_more.aspx ​ 数据专家全站分析： https://www.umeng.com 5.企业网站常见web服务官方参考：https://w3techs.com/technologies/overview/web_server/all 处理静态资源网站： nginx web服务软件： apache web服务软件：zabbix Tengine 处理动态资源网站 php web服务软件： tomcat 6.nginx程序功能介绍123456789101112131415161718192021222324252627特点：nginx因具有高并发（特别是静态资源）、占用系统资源少等特性 功能：nginx程序功能强大 1）可以满足web服务应用 apache 蓝汛 2）可以满足负载均衡应用 LVS Haproxy 3）可以满足缓存应用 Squid 局限：无法处理动态资源请求 盗链概念： 用户访问： 用户访问： | | | | 网站A 网站B www.gurenyun.com www.oldgirl.com gurenyun.jpg index.html gurenyun.avi 调用 www.gurenyun.com/gurenyun.jpg 盗用网站A的资源。 网站服务apache vs nginx 01. 从特点进行说明 02. 从功能方面说明 03. 从软件网络模型 网络编程 socket select：apache 事件01: 宿舍管理员 找人---一个一个房间进行查找（遍历） 事件02：幼儿园阿姨 负责看住小孩上厕所---一个一个进行确认 epoll： nginx 事件01: 宿舍管理员 找人---查找名单册 事件02：幼儿园阿姨 负责看住小孩上厕所---有感觉就站到教室圈里 7.nginx软件部署安装过程1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889 1）利用yum安装软件： 官方源安装：最新稳定版软件 目录结构信息（企业环境相符） 其他源安装：稳定版软件 目录结构信息（企业环境不太相符） web01：采用官方源安装 第一个历程：修改yum源 官方参考：http://nginx.org/en/linux_packages.html#RHEL-CentOS [root@web01 ~]# vim /etc/yum.repos.d/nginx.repo [nginx-stable] name=nginx stable repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://nginx.org/keys/nginx_signing.key 第二个历程：清除yum缓存信息 yum clean all 第三个历程：yum安装软件 yum install -y nginx web02：采用其他源安装 第一个历程：直接yum安装软件 yum install -y nginx 2）利用编译方式安装：自定义安装功能 自定义程序安装的目录 第一步：解决软件依赖关系 第二步：进行软件配置过程 配置软件目录 指定软件功能 第三步：进行软件编译过程 翻译解释的过程 C-gcc python-python解释器 第四步：进行软件编译安装 web03：编译安装软件 第一步：下载源码包 mkdir /server/tools -p cd /server/tools wget http://nginx.org/download/nginx-1.16.0.tar.gz 补充：解决软件依赖： yum install -y pcre-devel 说明：pcre-perl兼容正则表达式 未安装报错信息： ./configure: error: the HTTP rewrite module requires the PCRE library. You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre=&lt;path&gt; option. yum install -y openssl-devel 说明：openssl-devel 实现支持HTTPs 需要有私钥 公钥（证书） 未安装报错信息： ./configure: error: SSL modules require the OpenSSL library. You can either do not enable the modules, or install the OpenSSL library into the system, or build the OpenSSL library statically from the source with nginx by using --with-openssl=&lt;path&gt; option. yum install -y gcc* 说明：gcc c语言的解释器（nginx -- c语言 python） checking for OS + Linux 2.6.32-642.el6.x86_64 x86_64 checking for C compiler ... not found ./configure: error: C compiler cc is not found 第二步：解压源码包 tar xf nginx-1.16.0.tar.gz 第三步：软件编译配置过程 cd nginx-1.16.0/ useradd www -s /sbin/nologin -M ./configure --prefix=/application/nginx-1.16.0 --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --prefix=PATH set installation prefix 指定软件程序安装目录（不需要创建） --user=USER set non-privileged user for worker processes 为worker进程设置一个非特权用户（必须存在） --group=GROUP set non-privileged group for worker processes 为worker进程设置一个非特权用户组（必须存在） --with-http_ssl_module enable ngx_http_ssl_module 启用HTTPS功能 --with-http_stub_status_module enable ngx_http_stub_status_module 启动nginx状态监控功能 第四步：编译过程 make 第五步：编译安装 make install 第六步：程序目录创建软链接 ln -s /application/nginx-1.16.0/ /application/nginx 8.nginx程序目录结构信息 参见图 /etc/nginx/nginx.conf — 主配置文件 /etc/nginx/*cgi(通用接口) — nginx（无法处理动态请求） -fast_cgi- php 9.nginx程序配置文件说明123456789101112131415161718192021222324252627282930313233343536准备工作： cp nginx.conf nginx.conf.default grep -v &quot;^$&quot; nginx.conf.default &gt;nginx.conf /etc/nginx/nginx.conf user nginx; --- 指定worker进程管理用户 worker_processes 1; --- 指定worker进程的数量 建议调整数量=服务器CPU核心数（2倍） error_log /var/log/nginx/error.log warn; --- 指定错误日志保存路径 pid /var/run/nginx.pid; --- 指定程序pid文件保存路径 events &#123; worker_connections 1024; --- worker进程连接数 调整按照2的倍数 服务总的连接数=worker_processes*worker_connections&lt;系统打开文件数 &#125; http &#123; include /etc/nginx/mime.types; --- 加载指定其它配置文件（媒体资源类型文件） default_type application/octet-stream; --- 默认识别媒体类型 log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; --- 定义访问日志的格式信息 access_log /var/log/nginx/access.log ; --- 定义访问日志存储路径 sendfile on; --- 和nginx优化有关 #tcp_nopush on; --- 和nginx优化有关 keepalive_timeout 65; --- 连接超时时间 默认单位秒 #gzip on; --- 和nginx优化有关 include /etc/nginx/conf.d/*.conf; --- 加载conf.d下面的所有.conf扩展配置文件 &#125; 疑问解答： 01. nginx程序worker进程是什么？ master process：控制服务可以正常运行 老板 worker process：处理用户访问请求 员工 02. nginx配置文件结构： 1）核心配置部分 main 区域 2）事件配置部分 event 区域 3）网站配置部分 http 区域 指定网站功能参数 4）主机配置区域 server 区域 指定每个网站信息（域名 站点目录 首页文件） 5）location配置区域 指定网站特殊功能 主机配置文件配置： 12345678910111213141516171819202122232425262728293031323334353637准备工作： grep -Ev &quot;^$|#&quot; default.conf &gt;www.conf /etc/nginx/conf.d/www.conf server &#123; listen 80; --- 指定服务监听信息 默认监听端口信息 server_name www.gurenyun.com; --- 指定网站域名信息 location / &#123; --- 匹配不同uri，进行不同的配置 ？？？ root /usr/share/nginx/html; --- 指定站点目录路径 index index.html index.htm; --- 指定首页文件信息 &#125; error_page 500 502 503 504 /gurenyun,jpg; --- 优雅显示错误信息 location = /gurenyun.jpg &#123; --- 匹配指定50x.html的uri root /html; --- 指定站点目录 &#125; &#125;更改优雅显示错误页面： 实践配置： #vim www.conf server &#123; listen 80; server_name www.gurenyun.com; location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; error_page 404 500 502 503 504 /gurenyun.jpg; location = /gurenyun.jpg &#123; root /html; &#125; &#125; 创建目录和数据信息： mkdir /html --- 放入gurenyun.jpg图片 本地域名解析： C:\Windows\System32\drivers\etc\hosts 10.nginx程序企业应用方法：1) 如何搭建多个网站 www bbs blog第一个历程：创建多个网站主机文件: cd /etc/nginx/conf.d/ cp www.conf bbs.conf cp www.conf blog.conf 更改配置文件： 12345678910111213141516171819202122232425[root@web01 conf.d]# cat www.conf bbs.conf blog.conf server &#123; listen 80; server_name www.gurenyun.com; location / &#123; root /html/www; index index.html index.htm; &#125; &#125; server &#123; listen 80; server_name bbs.gurenyun.com; location / &#123; root /html/bbs; index index.html index.htm; &#125; &#125; server &#123; listen 80; server_name blog.gurenyun.com; location / &#123; root /html/blog; index index.html index.htm; &#125; &#125; 第二个历程：创建不同网站站点目录/创建网站页面信息index.html [root@web01 conf.d]# for name in {www,bbs,blog};do echo “$name.gurenyun.com” &gt;/html/$name/index.html;done [root@web01 conf.d]# for name in {www,bbs,blog};do cat /html/$name/index.html;done www.gurenyun.com bbs.gurenyun.com blog.gurenyun.com 第三个历程：配置DNS解析信息 hosts文件中加入解析信息： 10.0.0.7 www.gurenyun.com bbs.gurenyun.com blog.gurenyun.com 第四个历程：重启nginx程序 ​ 方法一：使用systemctl命令重启nginx程序 ​ systemctl restart/reload nginx ​ 方法二：利用nginx命令重启nginx程序 ​ nginx​ nginx -s reload​ nginx -t 检查配置文件语法​ 如何确认语法没问题​ 1-每个指令参数编写正确/位置放置正确​ 2-每个区域信息需要有一对花括号​ 3-每个指令参数最后有分号结尾​ PS：以上两种方式不要混用 2）如何访问网站页面123456789101112131415161718192021222324252627282930基于端口访问 server &#123; listen 8080; --- 修改端口号 server_name www.gurenyun.com; location / &#123; root /html/www; index index.html index.htm; &#125; &#125; 访问原理： 01. 和指定IP地址建立连接 --- 10.0.0.7 02. 向指定端口发出请求 --- 8080 03. 找寻匹配80端口的主机信息 04. 匹配用户的请求主机信息 将配置的第一个主机信息进行显示 基于地址访问 [root@web01 conf.d]# cat www.conf server &#123; listen 172.16.1.7:80; --- 修改地址信息 server_name www.gurenyun.com; access_log /var/log/nginx/access_gurenyun.log gurenyun; location / &#123; root /html/www; index index.html index.htm; &#125; &#125; PS：nginx程序涉及到IP地址的修改，都需要重启服务（不是平滑重启） 3) 利用nginx显示网站目录索引第一个历程：将首页文件进行删除 cd /html/www/ mv index.html{,.bck} 第二个历程：修改配置文件添加指令，建立目录索引 1234567891011server &#123; listen 80; server_name www.gurenyun.com; access_log /var/log/nginx/access_gurenyun.log gurenyun; location / &#123; root /html/www; index index.html index.htm; autoindex on; --- 当首页文件不存在，会显示站点目录索引结构信息 charset UTF-8; &#125; &#125; 4)利用nginx实现安全访问控制1.基于用户访问信息进行控制 /images /av/images 允许 gurenyun.jpg /av 禁止 gurenyun.html 第一个历程：部署站点目录环境 mkdir /html/www/{images,av} 第二个历程：编辑配置文件 1234567891011121314151617181920server &#123; listen 80; server_name www.gurenyun.com; access_log /var/log/nginx/access_gurenyun.log gurenyun; root /html/www; --- 全局配置 location / &#123; root /html/www; --- 局部配置 index index.html index.htm; &#125; location /images &#123; allow all; root /html/www; index gurenyun.jpg index.html index.htm; &#125; location /av &#123; allow 10.0.0.1; deny all; root /html/www; &#125; &#125; 2）基于用户认证信息进行控制第一个历程：创建密码文件信息 1234[root@web01 conf.d]# htpasswd -bc /etc/nginx/nginx.password gurenyun gurenyun123 Adding password for user gurenyun [root@web01 conf.d]# cat /etc/nginx/nginx.password gurenyun:$apr1$.RxGBSH0$ePH61Rs8PuAuhv9boxvYz0 第二个历程：编写主机配置文件 1234567891011121314[root@web01 conf.d]# vim www.conf server &#123; listen 80; server_name www.gurenyun.com; access_log /var/log/nginx/access_gurenyun.log gurenyun; auth_basic &quot;gurenyun61&quot;; auth_basic_user_file /etc/nginx/nginx.password; location / &#123; root /html/www; index index.html index.htm; autoindex on; charset UTF-8; &#125; &#125; 5) 利用nginx实现网站状态监控编写监控网站主机配置文件 12345678[root@web01 conf.d]# cat stat.conf server &#123; listen 80; server_name stat.gurenyun.com; location / &#123; stub_status; &#125; &#125; 重启nginx后将stat.gurenyun.com 加入 hosts文件中。 页面监控信息：1234567Active connections --- 总的激活并发连接数 accepts --- 总的接收连接数信息 handled --- 总的处理连接数信息 requests --- 总的请求数量 Reading: 读取请求报文数量 Writing: 回复响应报文数量 Waiting: 等待队列 取出指定信息进行监控： curl -H host:stat.gurenyun.com 172.16.1.7 可以用awk取出指定监控信息 curl -H host:stat.gurenyun.com 172.16.1.7 2&gt;/dev/null|awk ‘NR==3{print $1}’curl -H host:stat.gurenyun.com 172.16.1.7 -s|awk ‘NR==3{print $1}’ 6）nginx程序日志配置说明错误日志：记录服务常见错误vim /etc/nginx/nginx.conf 01. 服务运行错误信息 用户访问页面的错误 12345678910错误级别设置：error_log /var/log/nginx/error.log warn（记录错误级别）; debug --- 调试级别 产生的日志信息最多 info --- 信息级别 notice --- 通知级别 warn --- 警告级别 error --- 错误级别 crit --- 严重级别 alert --- 非常严重级别 emerg --- 灾难级别 产生的日志信息最少 访问日志：记录用户访问信息 记录用户访问网站什么信息 记录访问访问网站用户信息 123456789 nginx默认变量：$remote_addr： --- 访问网站客户端源IP地址 $remote_user --- 表示认证用户名称信息 [$time_local] --- 显示响应时间信息 $request --- 显示请求行信息 $status --- 显示状态码 $body_bytes_sent --- 回复数据大小（流量）信息 字节 $http_referer --- 盗链人地址信息/用于推广 $http_user_agent --- 显示用户访问网站客户端程序 （电脑 手机） 11.nginx程序区域模块 - location 功能：匹配不同的uri信息，做出相应处理 Syntax: location [ = | ~ | * | ^ ] uri { … } 语法结构 匹配 uri 执行什么动作 awk ‘模式{动作}’ Default: — Context：server, location — 可以配置在什么区域中 =: 精确匹配 = /gurenyun www.gurenyun.com /gurenyun : 模糊匹配（区分大小写） ~*： 模糊匹配（不区分大小写） ^: 优先匹配 不识别uri信息中正则符号 1234567891011121314151617181920如何应用 优先级location = / &#123; 01 return 301; &#125; location / &#123; 05 默认匹配 return 302; &#125; location /documents/ &#123; 04 return 404; &#125; location ^~ /images/ &#123; 02 return 502; &#125; location ~* \.(gif|jpg|jpeg)$ &#123; 03 return 520; &#125; 样例：测试 ~ 和 ~* location ~ /test/ { return 301; } location ~* /test/ { return 302; } 规范站点目录结构信息： [root@web01 conf.d]# cat www.conf server { listen 80; server_name www.gurenyun.com; location ~* .jpg$ { root /html/www/jpg; } location ~* .png$ { root /html/www/png; } location / { root /html; index index.html; } } 12.nginx程序重写功能说明 rewrite Syntax: rewrite regex replacement [flag]; 正则信息匹配 修改成的信息 标记 Default: — Context: server, location（推荐）, if ​ last： 跳转完毕，会在执行其他动作​ break： 跳转完毕，不在执行其他动作​ redirect 302 临时跳转 *****​ permanent： 301 永久跳转 1）. 跳转配置中last与break区别对比示例123456789101112131415server &#123; listen 80; server_name www.gurenyun.com; root /html; location ~ ^/break/ &#123; rewrite ^/break/ /test/ break; &#125; location ~ ^/last/ &#123; rewrite ^/last/ /test/ last; &#125; location /test/ &#123; default_type application/json; return 200 &apos;ok&apos;; &#125;&#125; 2） 临时跳转和永久跳转配置1234567891011server &#123; listen 80; server_name www.gurenyun.com; root /html; location ~ ^/gurenyun &#123; rewrite ^(.*)$ https://www.etiantian.org redirect; rewrite ^(.*)$ https://www.etiantian.org permanent; # return 301 http://bbs.etiantian.org; # return 302 http://bbs.etiantian.org; &#125; &#125; 永久跳转记录跳转信息： 301临时跳转不记录跳转信息：302 1234567891011121314151617301永久： 用户浏览器 -请求信息-&gt; www.360buy.com --&gt; 301 --&gt; www.jd.com 客户端 服务端 用户浏览器 -请求信息-&gt; www.360buy.com -&gt; www.jd.com ---&gt; 服务端 总结：在浏览器上记录跳转的缓存信息 www.jd.com/gurenyun.jpg --- www.jd.com/2017/ 404 302临时： 用户浏览器 -请求信息-&gt; www.360buy.com --&gt; 302 --&gt; www.jd.com 客户端 服务端 用户浏览器 -请求信息-&gt; www.360buy.com --&gt; 302 --&gt; www.jjd.com 客户端 服务端 总结：在浏览器上不记录跳转的缓存信息 www.jd.com/gurenyun.jpg --- www.jd.com/2018/ 补充：实现地址跳转的方法 第一种：利用rewrite 正则匹配 第二种：利用retrun 练习1）：用户访问/abc/1.html实际上真实访问是/ccc/bbb/2.html#http://www.gurenyun.com/abc/1.html ==&gt; http://www.gurenyun.com/ccc/bbb/2.html 第一里程：准备真实的访问路径 [root@web01 conf.d]# mkdir -p /html/www/ccc/bbb[root@web01 conf.d]# echo ceshi11111111 &gt; /html/www/ccc/bbb/1.html 第二个里程：更改配置文件 Nginx跳转配置 12345678910[root@web01 conf.d]# cat www.conf server &#123; listen 80; server_name www.gedage.com; root /html/www; location /abc/ &#123; rewrite (.*) /ccc/bbb/1.html redirect; #return 302 /ccc/bbb/1.html; &#125;&#125; 第三个里程：重启Nginx服务 [root@web03 ~]# systemctl restart nginx 练习2）：用户访问/2018/ccc/bbb/2.html实际上真实访问是/2019/ccc/bbb/2.html#http://www.gurenyun.com/2018/ccc/bbb/2.html ==&gt; http://www.gurenyun.com/2019/ccc/bbb/2.html 第一个里程：准备真实的访问路径： [root@web03 ~]# mkdir /html/www/2019/ccc/bbb -p[root@web03 ~]# echo “2019_ccc_bbb_2” &gt; /html/www/2019/ccc/bbb/2.html 第二个里程：Nginx跳转配置 123456789[root@web01 conf.d]# cat www.conf server &#123; listen 80; server_name www.gedage.com; root /html/www; location /2018 &#123; rewrite ^/2018/(.*)$ /2019/$1 redirect; &#125;&#125; 第三个里程：重启Nginx服务 [root@web03 ~]# systemctl restart nginx 练习3）：用户访问course-11-22-33.html实际上真实访问是/course/11/22/33/course_33.html​ #http://www.gurenyun.com/course-11-22-33.html ==&gt; http://www.gurenyun.com/course/11/22/33/course_33.html 第一个里程 准备真实的访问路径 [root@web03 ~]# mkdir /html/www/course/11/22/33/ -p[root@web03 ~]# echo “docs.etiantian.org” &gt; /html/www/course/11/22/33/course_33.html 第二个里程 Nginx跳转配置 123456789[root@web01 conf.d]# cat www.conf server &#123; listen 80; server_name www.gedage.com; root /html/www; location /course &#123; rewrite ^/course-(.*)-(.*)-(.*).html /course/$1/$2/$3/course_33.html redirect; &#125;&#125; 第三个里程：重启Nginx服务 [root@web03 ~]# systemctl restart nginx 终极测验a）：访问gurenyun.com/gurenyun.jpg —&gt; www.gurenyun.com/gurenyun.jpg 临时 第一个历程：准备环境 将gurenyun.jpg — 站点目录 第二个历程：编写配置文件： server { listen 80; server_name www.gurenyun.com; root /html/www; index index.html; rewrite ^/(.*) http://www.gurenyun.com/$1 redirect; } 第一种方式：多个server配置 server { listen 80; server_name gurenyun.com; rewrite ^/(.*) http://www.gurenyun.com/$1 redirect; } server { listen 80; server_name www.gurenyun.com; root /html/www; index index.html; } 第二种方式：打破循环 if 内置变量 server { listen 80; server_name www.gurenyun.com; root /html/www; index index.html; if ($host ~ ^gurenyun.com) { rewrite ^/(.*) http://www.gurenyun.com/$1 redirect; } } nginx常用内置变量： $host 记录请求报文请求主体的host信息 $server_name 当前用户配置server_name的域名信息 $request_filename 当前请求的文件路径名（带网站的主目录/html/www/images/test.jpg） $request_uri 当前请求的文件路径名（不带网站的主目录/images/test.jpg） $scheme 用的协议，比如http或者https第三个历程：配置DNS解析 10.0.0.7 gurenyun.com www.gurenyun.com 终极测验b）：访问www.etiantian.org —&gt; www.gurenyun.com 永久 第一个历程：准备环境 将gurenyun.jpg — 站点目录 第二个历程：编写配置文件： server { listen 80; server_name www.gurenyun.com; root /html/www; index index.html; if ($host ~ www.etiantian.org) { rewrite ^/(.) http://www.gurenyun.com/$1 redirect; } }第三个历程：主配置文件编写 include /etc/nginx/conf.d/www.conf include /etc/nginx/conf.d/.conf;第四个历程：配置DNS解析 10.0.0.7 gurenyun.com www.gurenyun.com www.etiantian.org 部署LNMP架构 ​ L linux系统： 防火墙/selinux关闭 /tmp 1777​ N nginx程序：​ M mysql程序： mariadb yum安装​ P php程序： 编译安装 yum安装 7.1​ 13.mariadb安装过程：yum install mariadb-server mariadb -y php安装过程： 第一个历程：移除其他版本php软件 yum remove php-mysql php php-fpm php-common 第二个历程：更新yum源 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 第三个历程：yum安装 yum install -y php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全网备份步骤]]></title>
    <url>%2F2019%2F08%2F27%2Fquan%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[利用rsync进行打包数据备份,避免丢失. 全网备份步骤要求：123456789101112131415161718项目文档： 项目背景 项目需求规划（硬件 人员ELK日志分析（开发人员） 日程规划1个月 ） 1)所有服务器的备份目录必须都为/backup。 ok 2)要备份的系统配置文件包括但不限于： ok a.定时任务服务的配置文件(/var/spool/cron/root)（适合 web 和 nfs 服务器）。 b.开机自启动的配置文件(/etc/rc.local)（适合 web 和 nfs 服务器）。 c.日常脚本的目录 (/server/scripts)。 d.防火墙 iptables 的配置文件(/etc/sysconfig/iptables)。 e. 自己思考下还有什么需要备份呢？ 3)Web 服务器站点目录假定为(/var/html/www)。 ok 4)Web 服务器 A 访问日志路径假定为（/app/logs） ok 5)Web 服务器保留打包后的 7 天的备份数据即可(本地留存不能多于 7 天，因为太多硬盘会满) ok 6)备份服务器上, , 保留 每周一的所有数据副本，其它 要保留 6个月的数据副本。 OK 7)备份服务器上要按照备份数据服务器的内网 IP 为目录保存备份，备份的文件按照时间名字保存。 ok 8)需要确保备份的数据尽量完整正确，在备份服务器上对备份的数据进行检查，把备份的成功及失败结 果信息发给系统管理员邮箱中 验证数据完整性 发送邮件信息 客户端1.创建备份目录1mkdir -p /backup 2.进行压缩打包备份12345678910111213打包以下四个目录/varspool/cron/root /etc/rc.local/server/scripts/etc/sysconfig/iptablescd /tar zchf /backup/system_backup_$(data +%F%a).tar.gz ./varspool/cron/root ./etc/rc.local ./server/scripts ./etc/sysconfig/iptables备份站点 tar zcf /backup/web_www_$(data +%F%a).tar.gz ./var/html/www/日志目录备份tar zchf /backup/web_logs_$(data +%F%a).tar.gz ./app/logs 3.控制客户端备份数据存储量1find /backup -type f -name &quot;*.tar.gz&quot; -mtime +7 |xargs rm 4.创建指纹验证1find /backup/ -type f -name &quot;*(date +%f%a).tar.gz&quot;|xargs md5sum &gt; /backup/ifinger.txt 5.进行数据备份1rsync -avz /backup//10.0.0.31 rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 服务端1.创建备份目录1mkdir -p /backup 2.rsync守护进程部署忽略 3.保存指定数据信息，其余删除1find /backup -type f -name &quot;*.tar.gz&quot; -mtime +180 ! -name &quot;*_Mon.tar.gz&quot; 4.验证数据完整性1md5sum -c 10.0.0.31/finger.txt 5.发送邮件123456789101112vim /etc/mail.rcset from=309443050@qq.com smtp=smtp.qq.com smtp-auth-user=309443050 smtp-auth-password=zkbw bvpp xoll cadb smtp-auth=login启动邮件服务systemctl status postfix.service 编写脚本客户端脚本1234567891011121314151617181920212223vim /server/scripts/nfs01.sh#!/bin/bashIp_Info=&quot;$(hostname -i)&quot;Dir_Info=&quot;/backup/&quot;Date_Info=&quot;$(date +%F%a -d &quot;-1day&quot;)&quot;#1.创建备份目录mkdir -p $Dir_Info$Ip_Info#2.进行压缩打包备份cd /tar zchf $Dir_Info$Ip_Info/system_backup_$Date_Info.tar.gz ./varspool/cron/root ./etc/rc.local ./server/scripts ./etc/sysconfig/iptables#tar zchf $Dir_Info$Ip_Info/system_www_$Date_Info.tar.gz ./var/html/www/#tar zchf $Dir_Info$Ip_Info/system_logs_$Date_Info.tar.gz ./app/logs#删除七天以前的数据find $Dir_Info$Ip_Info -type f -name &quot;*.tar.gz&quot; -mtime +7 |xargs rm &amp;&gt;/dev/null#生成指纹文件find $Dir_Info$Ip_Info -type f -name &quot;*$Date_Info.tar.gz&quot;|xargs md5sum &gt; $Dir_Info$Ip_Info/finger.txt#传输文件rsync -az $Dir_Info$Ip_Info rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 服务端脚本123456789vim /server/scripts/backup.sh#!/bin/bash#1.验证数据完整性find /backup/ -type f -name &quot;finger.txt&quot;|xargs md5sum -c &gt; /tmp/check_data.log#删除多余数据find /backup -type f -name &quot;*.tar.gz&quot; -mtime +180 ! -name &quot;*_Mon.tar.gz&quot;|xargs rm &amp;&gt;/dev/null#发送通知邮件mail -s &quot;check_data_info&quot; 1468870854@qq.com &lt; /tmp/check_data.log~ 校对时间ntpdate ntp1.aliyun.com]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>全网备份</tag>
      </tags>
  </entry>
</search>
